

<p>
  <strong>Arrays</strong> are objects that hold multiple objects. They are somewhat like lists.
</p>

<p>
  In the interactive ruby console, let's type in the following and press enter:
</p>

<pre><code class="irb">
colors = ["red", "blue", "green"]
</code></pre>

<p>
  Now <code>colors</code> holds 3 items, <code>"red"</code>, <code>"blue"</code>, and <code>"green"</code>. 
</p>

<p>
  Arrays can be initialized with the <code>[]</code> syntax. To create an empty array, we simply write code like such:
</p>

<pre><code class="irb">
empty_array = []
</code></pre>

<p>
  Another way to declare an empty array is with <code>Array.new</code>.
</p>

<pre><code class="irb">
empty_array = Array.new
</code></pre>


<h3>Accessing Elements</h3>

<p>
  Let's take a look at the <code>colors</code> array we have just created:
</p>

<pre><code class="irb">
colors = ["red", "blue", "green"]
</code></pre>

<p>
  In the <code>colors</code> array, let's say we want to access the second item, <code>"blue"</code>. In order to do this, we simply enter the following code:
</p>

<pre><code class="irb">
colors[1]
=> "blue"
</code></pre>

<p>
  As you can see, you can insert the index of the item next to the variable to retreive the item.
</p>

<div class="well">
  <h3>Zero based indexing</h3>
  <p>
    But wait, <strong>shouldn't it be</strong> <code>colors[2]</code>? Since it's the 2nd item, it would make sense to say <code>colors[2]</code> instead of <code>colors[1]</code>, right?
  </p>  

  <p>
    Well it turns out that in computer science, arrays are indexed from 0. That means that the first item would be referenced like <code>colors[0]</code>.
  </p>
</div>

<p>
  <strong>We can also replace the element inside of an array</strong>:
</p>

<pre><code class="irb">
colors[1]
=> "blue"

colors[1] = "black"
colors
=> ["red", "black", "green"]
</code></pre>

<p>
  Let's make another array. In <code>irb</code>, let's enter the following:
</p>

<pre><code class="irb">
people = ["Jack", "Adam", "Mike"]
</code></pre>

<p>
  Here, we have created a <code>people</code> array with the names of 3 people inside of it. Let's access the first element in the <code>people</code> array. In <code>irb</code>, enter the following:
</p>

<pre><code class="irb">
people[0]
</code></pre>

<p>
  At first, zero based indexing can be a little confusing, but you'll get used to it in no time.
</p>

<p>Let's go over some common array methods.</p>

<h2>Manipulating the Array</h2>

<p>
  In Ruby, there are a lot of array methods that we can use to manipulate them. Many of them read like English, so they are fairly easy to understand.
</p>

<p class="alert alert-info">
  <strong>Don't worry about trying to memorize everything</strong> - the goal here is to simply introduce you to some of the methods that Ruby has. You will remember and internalize these methods once you use them a couple of times - but they are impossible to remember at once.
</p>

<hr>

<p>
  Let's retrieve the first person in the list. We <em>could</em> access the first person like we just did using indexes:
</p>  

<pre><code class="irb">
people[0]
</code></pre>

<p>
  <em>Or</em>, we can use the <code>first</code> method. In <code>irb</code>, type in the following:
</p>

<pre><code class="irb">
people.first
</code></pre>

<hr>

<p>
  Similarly, to retrieve the last person in the list, simply type the following:
</p>  

<pre><code class="irb">
people.last
</code></pre>

<hr>

<p>
  What if we want to find the size of the array? We can either use <code>count</code>, <code>length</code>, or <code>size</code>. Type the following in <code>irb</code>:
</p>

<pre><code class="irb">
people.count

people.length

people.size
</code></pre>

<p>
  These three methods do the same thing.
</p>

<hr>

<p>
  To see if an element is inside of an array, we can use the <code>include?</code> method. In <code>irb</code>, type the following code:
</p>

<pre><code class="irb">
people.include?("Jack")

people.include?("Bob")
</code></pre>

<hr>

<p>
  To get the array index of a certain element, you can use the <code>index</code> method. For example, in our <code>people</code> array, <code>"Jack"</code> is the first element, so the index is <code>0</code>. In <code>irb</code>, type in the following code:
</p>

<pre><code class="irb">
people.index("Jack")
</code></pre>

<hr>

<p>
  Sometimes we want to join all elements inside of the array into one whole string. We can use <code>join</code> to accomplish this. Enter the following in <code>irb</code> and see the results:
</p>

<pre><code class="irb">
people.join
</code></pre>

<p>
  As you have probably noticed, the string doesn't look too pretty! All of the names are mushed together. Instead, we want to join all of the names into one string, but put a space between each name. In <code>irb</code>, type in the following code:
</p>

<pre><code class="irb">
people.join(" ")
</code></pre>

<p>
  By passing in a blank space as an argument, we can join the array elements while placing a space in between the elements.
</p>

<hr>

<p>
  Sometimes we want to remove the last element from the array. For this, we can use the <code>pop</code> method. In <code>irb</code>, type in the following code:
</p>

<pre><code class="irb">
people.pop
</code></pre>

<p>
  If you print out the <code>people</code> array, you will see that the array now only consists of 2 people.
</p>  

<hr />

<p>
  One of the most common operations with arrays is to add a new element into the array. To do this, we can use the <code>push</code> method. In <code>irb</code>, type in the following:
</p>

<pre><code class="irb">
people.push("Bob")
</code></pre>

<p>
  The <code>push</code> method adds the element given in the parameter in the end of the array.
</p>

<p>
  Another way to do the same thing is to use the <code>&lt;&lt;</code> syntax.
</p>

<pre><code class="irb">
people &lt;&lt; ("Bob")
</code></pre>

<p>
  Which syntax you use is a matter of preference.
</p>

<hr>

<p>
  To reverse the order of an array, you can use the <code>reverse</code> method:
</p>

<pre><code class="irb">
people.reverse
=> ["Bob", "Adam", "Jack"]
</code></pre>

<hr>

<p>
  To get a random element form the array, you can use <code>sample</code>:
</p>

<pre><code class="irb">
people.sample
</code></pre>

<hr>

<p>
  To get only unique elements, you can use <code>uniq</code>:
</p>

<pre><code class="irb">
people = ["Jake", "Jake", "Adam", "Mike", "Mike", "Mike"]

people.uniq
</code></pre>

<hr>

<p>
  There are a bunch of other array methods that would be great to take a look at. You can take a look at them <%= link_to 'here', 'https://ruby-doc.org/core-2.2.0/Array.html', target: '_blank' %>.
</p>

<p>
  <strong>The important thing to remember is that you don't need to memorize all of these methods.</strong> In the exercises throughout the course, we will make sure you are reviewing these concepts. You will review these concepts again in the Ruby Core Challenges which you will do before creating your Instagram clone.
</p>

<h3>Arrays can contain multiple data types</h3>

<p>
  One thing to note is that arrays in Ruby can hold different data types:
</p>

<pre><code class="irb">
array = ["this is a string", 10, 32.12, [true, "Hello"], {key: "value"}]
</code></pre>

<p>
  In other languages, having different types inside an array is not allowed. <strong>In Ruby, we have the convenience of allowing multiple types in one array.</strong>
</p>

<h3>Multi-dimensional Arrays</h3>

<p>
  An array can also hold an array within the array.
</p>

<pre><code class="ruby">
people = [["Adam", 21], ["Jake", 23], ["Paul", 30]]
</code></pre>

<p>
  Here, we have an array with 3 <em>subarrays</em> inside of it. For example, <code>["Adam", 21]</code> is one subarray, <code>["Jake", 23]</code> is another, and <code>["Paul", 30]</code> is another. 
</p>

<p>
  Accessing the data inside multidimensional array can be quite tricky at first. Let's create a multidimensional array that holds the name and age of 3 people:
</p>  

<pre><code class="ruby">
people = [["Adam", 21], ["Jake", 23], ["Paul", 30]]

# Getting the 0th item will give us the first subarray
people[0]
=> ["Adam", 21]

# To get the first item inside of the subarray, we access the 0th index of the subarray
people[0][0]
=> "Adam"

# To get the second item inside of the subarray, we access the 1st index of the subarray
people[0][1]
=> 21
</code></pre>

<h2>Overview</h2>

<ul>
  <li>Arrays are objects that hold a list of items</li>
  <li>You can create an empty array with <code>[]</code> or <code>Array.new</code></li>
  <li><strong>Arrays utilize zero based indexing</strong> - the first element's index is <code>0</code></li>
  <li>You can replace elements inside of arrays</li>
  <li>You can access elements by inserting the index like such: <code>people[1]</code> (returns the 2nd element)</li>
  <li>There are many array methods that are easy to use</li>
  <li>Ruby arrays can contain data of different types</li>
  <li>Arrays can store arrays within itself (<em>multidimensional arrays</em>)</li>
</ul>

<h2>Exercise: Super Simple Random Quote Generator</h2>

<p>
  Let's create a super simple random quote generator using arrays in Ruby to get used to working with arrays! Create a new file called <code>quotes.rb</code>.
</p>

<p>
  Inside this file, add the following lines of code:
</p>

<pre><code class="ruby">
quotes = Array.new
puts "There are #{quotes.length} quotes now."

quote = "I like Ramen"
puts "Adding #{quote}..."
quotes.push(quote)
puts "There are #{quotes.length} quotes now."

quote = "Momo is good too"
puts "Adding #{quote}..."
quotes.push(quote)
puts "There are #{quotes.length} quotes now."

quote = "I love Ruby"
puts "Adding #{quote}..."
quotes.push(quote)
puts "There are #{quotes.length} quotes now."

quote = "I want to Ruby on Rails"
puts "Adding #{quote}..."
quotes.push(quote)
puts "There are #{quotes.length} quotes now."

quote = "I want to become a web developer"
puts "Adding #{quote}..."
quotes.push(quote)
puts "There are #{quotes.length} quotes now."

puts "....."
puts "Generating random quote......"
puts "....."

random_quote = quotes.sample

puts "Random quote at index #{quotes.index(random_quote)}: #{random_quote}"
</code></pre>

<p>
  Save the file and run the program.
</p>

<p>
  Your output should look like this:
</p>

<pre><code class="bash">
There are 0 quotes now.
Adding I like Ramen...
There are 1 quotes now.
Adding Momo is good too...
There are 2 quotes now.
Adding I love Ruby...
There are 3 quotes now.
Adding I want to Ruby on Rails...
There are 4 quotes now.
Adding I want to become a web developer...
There are 5 quotes now.
.....
Generating random quote......
.....
Random quote at index 4: I want to become a web developer
</code></pre>

<p>
  You will notice that every time you run the code, the quote generated will be random.
</p>

<h2>Assignment</h2>

<ol>
  <li>List 10 things that could be represented with arrays</li>
</ol>

<% @submission_form = true %>

