
<p>
	Welcome to the world of <strong>Object Oriented Programming</strong>.
</p>

<p>
	In these next few lessons, we will give you a basic overview of what object oriented programming is.
</p>

<h3>What are objects?</h3>

<p>
	In the real world, <strong>objects are anything where the characteristics are well defined</strong> - a cup, a table, a bag, etc. <strong>Each object has different characteristcs that make them easy to distinguish between.</strong> You know that a cup is different than a table, because they both have different characteristics.
</p>

<p>
	<strong>Let's take an example of a restaurant.</strong>
</p>

<ol>
	<li>Go to a restaurant</li>
	<li>Look at the menu</li>
	<li>Tell the waiter your order</li>
	<li>Eat the food that is delivered</li>
</ol>

<p>
	Can you identify the objects involved in this scenario?
</p>

<p>
	The objects involved are a restaurant, menu, waiter, order, food, and yourself. <strong>You can see that each of these objects are interacting with each other.</strong> Each object has its attributes, as well as functions that other objects can use to interact with each other.
</p>

<h3>What is Object Oriented Programming?</h3>

<p>
	Object oriented programming is a paradigm, or a mental model. <strong>It's not a programming language, but rather a way to design your software.</strong>
</p>

<p>
	<strong>"Object oriented" means that you think of your software as a collection of objects and the interactions that happen between them.</strong> As we saw in the example of a restaurant, in real life, we can think of scenarios as objects interacting with each other.
</p>

<p>
	By organizing our code in such a way, <strong>we can build code that can be easily reused</strong>. When we can reuse code, then we are keeping our code <strong>DRY (Don't Repeat Yourself)</strong> and maintainable. We are also forced to visualize what objects are involved in our program, and what the attributes, functions, and responsibilities are for each object, and how they should interact with each other.
</p>

<h3>Classes and Instances</h3>

<p>
	<strong>Let's talk about cats.</strong>
</p>

<p>
	If we think about cats, all cats share same characteristics but also differ in how they look, their age, and their given name.
</p>

<p>
	<strong>All cats have:</strong>
</p>

<ul>
	<li>Name</li>
	<li>Age</li>
	<li>Breed</li>
</ul>

<p>
	<strong>All cats can:</strong>
</p>

<ul>
	<li>Walk forward</li>
	<li>Run</li>
	<li>Jump</li>
	<li>Eat</li>
</ul>	

<p>
	We can organize this information into a <strong><em>class</em></strong> that we can name <code>Cat</code>. Inside the class, we can have <strong><em>variables</em></strong> that represent the common attributes of a cat, and <strong><em>methods</em><strong> that represent the common operations that all cats can perform.
</p>	

<p>
	Each different cat is an <strong><em>instance</em></strong> of the <code>Cat</code> class:
</p>	

<%= image_tag 'ruby_lessons/class_vs_instance.png', class: 'screenshot img-responsive' %>

<p>
	Let's take another example - cars.
</p>

<p>
	All cars have:
</p>

<ul>
	<li>Color</li>
	<li>Brand</li>
	<li>Max Speed</li>
</ul>

<p>
	All cars can:
</p>

<ul>
	<li>Drive forward</li>
	<li>Drive backward</li>
	<li>Stop</li>
	<li>Turn right</li>
	<li>Turn left</li>
</ul>

<p>
	The things that all cars have are the <strong><em>attributes</em></strong>. The things that all cars can do are the <code>methods</code>.
</p>



<p>
	Every car is an <strong><em>instance</em></strong> of a <code>Car</code> class. The <code>Car</code> class simply serves as a <em>blueprint</em> for creating new instances of cars.
</p>
<p>
	In other words, the <code>Car</code> class provides a blueprint: every car has a color, brand, max speed, and so on. However, every car also has different colors, brand, and max speeds. These individual attributes are different for each <strong>instance</strong> of the <code>Car</code> class.
</p>


<h2>Things to Think About</h2>

<ol>
	<li>Try to think of real life objects and try to model them as classes and instances</li>
</ol>

<!-- 

<h3>Objects</h3>

<p>
	Let's think about the bill generator program that we wrote before. When we generate a bill, what are the objects that are involved?
</p>

<ul>
	<li>Orders</li>
	<li>A Bill Calculator that inputs the orders</li>
</ul>

<p>
	<strong>Let's first talk about orders.</strong>
</p>

<p>
	What does an order consist of?
</p>

<p>
	<strong>It consists of...</strong>
</p>
<ul>
	<li>An item</li>
	<li>The price of the item</li>
</ul>

<P>
	An order also might consist of information like when the order was taken, who the order was taken by, and so forth, but for now let's just focus on these two pieces of information: the <em>item</em> of the order and the <em>price</em> of that item.
</P>

<p>
	Let's look at an example:
</p>

<ul>
	<li><strong>Order 1</strong></li>
	<ul>
		<li>Item: Pizza</li>
		<li>Price: 200</li>
	</ul>

	<li><strong>Order 2</strong></li>
	<ul>
		<li>Item: Milk Tea</li>
		<li>Price: 40</li>
	</ul>

	<li><strong>Order 1</strong></li>
	<ul>
		<li>Item: Coffee</li>
		<li>Price: 60</li>
	</ul>
</ul>

<p>
	Here, we see three orders, each with different information. <strong>How can we represent these 3 orders in a consistent and understandable way in code?</strong> We'll explore how we can organize information into <em>classes</em> in the next lesson.
</p>



 -->