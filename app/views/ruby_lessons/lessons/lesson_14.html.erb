<p>
	Now that we understand the difference between classes and instances, let's code a class.
</p>

<p>
	Let's think about dogs. All dogs have a <strong>name</strong> and a <strong>breed</strong>. This means that these are <strong>attributes</strong> of dogs.
</p>

<p>
	First, let's create a Dog class. Create a new file called <code>dog.rb</code> and enter the following information:
</p>

<pre><code class="ruby">
class Dog

end
</code></pre>


<p>
	Congratulations! You've written your first Ruby class! Let's now create a new <code>Dog</code> and print it out to the console. Change your file to look like this:
</p>

<pre><code class="ruby">
class Dog
end

barnie = Dog.new

puts barnie.inspect
</code></pre>

<p>
	Save the file and run the program. It should give you an output something like this:
</p>

<pre><code class="ruby">
#&lt;Dog:0x000000008052c8&gt;
</code></pre>

<p class="alert alert-info">
	The <code>inspect</code> method allows us to look at the object in more detail.
</p>

<p>
	We just created our first <code>Dog</code> object. <code>Dog</code> is the <strong><em>class</em></strong>, and <code>barnie</code> is an <strong><em>instance</em></strong> of the <code>Dog</code> class.
</p>

<p>
	Let's go through what we just did.
</p>

<ul>
	<li>We created a <code>Dog</code> class (it doesn't do anything yet)</li>
	<li>We created a new instance of the <code>Dog</code> class with the <code>new</code> method</li>
	<li>We stored the new <code>Dog</code> into a variable called <code>barnie</code></li>
	<li>We printed <code>barnie</code></li>
</ul>

<p>
	Let's add some code to store information inside each <code>Dog</code> object. Change the file to look like this:
</p>

<pre><code class="ruby">
class Dog
	def initialize(name, breed)
		@name = name
		@breed = breed
	end
end

dog = Dog.new

puts dog.inspect
</code></pre>

<p>
	Save the file and run the program. 
</p>

<p>
	Woops! Looks like we got an error.
</p>

<pre><code class="bash">
dog.rb:2:in `initialize': wrong number of arguments (given 0, expected 2) (ArgumentError)
        from dog.rb:8:in `new'
        from dog.rb:8:in `&lt;main&gt;'
</code></pre>

<br>

<div class="well">
	<h3>Debugging</h3>

	<p>
		Let's try to decipher this error message:
	</p>

<pre><code class="bash">
dog.rb:2:in `initialize': wrong number of arguments (given 0, expected 2) (ArgumentError)	
</code></pre>
	
	<p>
		<strong>From this error message, we can tell where the bug is.</strong>
	</p>

	<p>
		<strong>First</strong>, it says that the error is on line 2 of <code>dog.rb</code> (<code>dog.rb:2</code>).
	</p>

	<p>
		<strong>Then</strong> it says that the error is in <code>initialize</code> (<code>dog.rb:2:in `initialize'</code>).
	</p>

	<p>
		<strong>Finally</strong>, it says that we are giving a wrong number of arguments - we gave it 0 arguments and it expected 2 arguments (<code>wrong number of arguments (given 0, expected 2) (ArgumentError)	</code>).
	</p>

	<p>
		From this information, we know that the root of the problem is on line 2 in the <code>initialize</code> method. But wait...what is this <code>initialize</code> method?
	</p>
</div>

<div class="well">
	<h3>initialize</h3>

	<p>
		For those with experience with other programming languages, the <code>initialize</code> method is a <strong>constructor</strong>. A constructor in programming is a special method that initializes the object of the class.
	</p>

	<p>
		Whenever a new object is created, Ruby looks for a method called <code>initialize</code> and runs the method. In other words, when the <code>new</code> method is triggered, Ruby looks for a method called <code>initialize</code> in the class and executes it.
	</p>

	<p>
		For example, let's say we have a class called <code>Test</code> that looks like this:
	</p>

<pre><code class="ruby">
class Test
  def initialize
  	puts "I've been initialized!"
  end
end
</code></pre>

	<p>
		Now when we create a new instance of this class, let's see what happens:
	</p>

<pre><code class="ruby">
Test.new
</code></pre>

	<p>
		The output will look like this:
	</p>

<pre><code class="irb">
I've been initialized!	
</code></pre>

	<p>
		<strong>Again, when we create a new instance of a class in Ruby, it finds the <code>initialize</code> method and executes it.</strong> In this case, our <code>initialize</code> method simply <code>puts</code> the string "I've been initialized!".
	</p>

	<p>
		<strong>Let's go back to our order program.</strong> When we run <code>Dog.new</code>, Ruby finds the <code>initialize</code> method and runs the method. In the <code>initialize</code> method, we have two parameters: <code>name</code> and <code>breed</code>. 
	</p>

	<p>
		The initialize method here <strong><em>expects</em></strong> two parameters - <strong>if it doesn't receive two parameters, then the program will return an error.</strong>
	</p>

	<p>
		The parameters for the <code>initialize</code> method are passed in from the <code>new</code> method:
	</p>

<pre><code class="ruby">
Dog.new(name, breed)
</code></pre>

	<p>
		The parameters passed in through the <code>new</code> method are now passed into the <code>initialize method.</code>
	</p>

	<p>The parameter values are then stored into two variables, <code>@name</code> and <code>@breed</code>. These variables that have a <code>@</code> attached to the back of the name are called <strong><em>instance variables</em></strong>.
	</p>
</div>


<p>
	In the next lesson, let's talk about what <em>instance variables</em> are.
</p>















