<h1><%= title_for(RubyLesson, 2, 2) %></h1>

<p>
	In the last lesson, we talked about what a set of orders might look like:
</p>

<ul>
	<li><strong>Order 1</strong></li>
	<ul>
		<li>Item: Pizza</li>
		<li>Price: 200</li>
	</ul>

	<li><strong>Order 2</strong></li>
	<ul>
		<li>Item: Milk Tea</li>
		<li>Price: 40</li>
	</ul>

	<li><strong>Order 1</strong></li>
	<ul>
		<li>Item: Coffee</li>
		<li>Price: 60</li>
	</ul>
</ul>

<p>
	How can we organize this data into understandable pieces of code?
</p>

<p>
	<strong>Introducing classes</strong>. Classes in programming represent the type of object. For example, orders can be represented as an <code>Order</code> class.
</p>

<pre><code class="ruby">
class Order
	
end
</code></pre>

<p>
	Congratulations! You've written your first Ruby class! Let's now create a new <code>Order</code> and print it out to the console. Change your file to look like this:
</p>

<pre><code class="ruby">
class Order
end

order = Order.new

puts order
</code></pre>

<p>
	Save the file and run the program. It should give you an output something like this:
</p>

<pre><code class="ruby">
#&lt;Order:0x000000008052c8&gt;
</code></pre>

<p>
	We just created our first <code>Order</code> object. Let's go through what we just did.
</p>

<ul>
	<li>We created an <code>Order</code> class (it doesn't do anything yet)</li>
	<li>We created a new <code>Order</code> with the <code>new</code> method</li>
	<li>We stored the new <code>Order</code> into a variabled called <code>order</code></li>
	<li>We printed the <code>order</code></li>
</ul>

<p>
	Let's add some code to store information inside each <code>Order</code> object. Change the file to look like this:
</p>

<pre><code class="ruby">
class Order
	def initialize(item, price)
		@item = item
		@price = price
	end
end

order = Order.new

puts order
</code></pre>

<p>
	Save the file and run the program. 
</p>

<p>
	Woops! Looks like we got an error.
</p>

<%= image_tag 'ruby_lessons/order_error.png', class: 'screenshot img-responsive' %>

<div class="well">
	<h3>Debugging</h3>

	<p>
		Let's try to decipher this error message:
	</p>

<pre><code class="bash">
order.rb:2:in `initialize': wrong number of arguments (given 0, expected 2) (ArgumentError)	
</code></pre>
	
	<p>
		<strong>From this error message, we can tell where the bug is.</strong>
	</p>

	<p>
		First, it says that the error is on line 2 of <code>order.rb</code> (<code>order.rb:2</code>).
	</p>

	<p>
		Then it says that the error is in <code>initialize</code> (<code>order.rb:2:in `initialize'</code>).
	</p>

	<p>
		Finally, it says that we are giving a wrong number of arguments - we gave it 0 arguments and it expected 2 arguments (<code>wrong number of arguments (given 0, expected 2) (ArgumentError)	</code>).
	</p>

	<p>
		From this information, we know that the root of the problem is on line 2 in the <code>initialize</code> method. It seems that we need to give the program more arguments.
	</p>
</div>



<div class="well">
	<h3>Everything in Ruby is an Object</h3>

	<p>
		<strong>In Ruby, <em>everything is an object.</em></strong>
	</p>

	<p>
		In <code>irb</code>, let's type in the following:
	</p>

<pre><code class="irb">
String.class
=> Class	
</code></pre>

</div>

















