<h1><%= title_for(RspecBlogLesson, 5, 2) %></h1>

<p>
  Next, let's write tests for the <code>show</code> action. In the <code>show</code> action, we want to show an individual <code>Post</code>.
</p>

<p>
  Let's start by describing what we are testing:
</p>

<pre><code class="ruby">
describe "GET #show" do

end
</code></pre>

<p>
  Then let's write what it should do. In this case, it should render the <code>show</code> template:
</p>

<pre><code class="ruby">
describe "GET #show" do
  it "renders the show template" do

  end
end
</code></pre>

<p>
  Inside of the <code>it</code> block, we need to do the following this:
</p>

<ol>
  <li>Create a <code>Post</code></li>
  <li>Make a <code>GET</code> request to the <code>show</code> action with the <code>id</code> parameter</li>
  <li>Expect the response to render the <code>show</code> template</li>
</ol> 

<p>
  Let's go ahead and create a <code>Post</code>:
</p>

<pre><code class="ruby">
describe "GET #show" do
  it "renders the show template" do
    post = Post.create(title: "Post Title", author: 'Momo Taro', content: 'Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.')
  end
end
</code></pre>

<p>
  Even though this works, there are some problems:
</p>

<ul>
  <li>It's a bit messy and hard to read</li>
  <li>We need to create <code>Post</code>s like this in many of our tests</li>
  <ul>
    <li>This would be hard to maintain</li>
    <li>It is not DRY</li>
  </ul>
</ul>

<p>
  Fortunately, there's a gem called Factory Girl that fixes all of these problems.
</p>  

<h3>Introducing Factory Girl</h3>




