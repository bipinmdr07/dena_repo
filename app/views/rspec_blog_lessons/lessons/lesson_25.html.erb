

<p>
  Congratulations on writing your first tests! Right now I'm assuming everything is very confusing and it's not really making much sense right now. In this final lesson, I hope to clear up some of these feelings.
</p>

<h3>Testing is great...but it takes so much time. Do I really need to write tests?</h3>

<p>
  The answer is almost always yes. If you are writing a simple application or a application that only you are going use, then there is no need to test. However, if the application is going to be used by hundreds and thousands of users, then <strong>testing is absolutely necessary</strong>. The last thing you want is to write some code that makes the whole app buggy, but you don't know what the problem is.
</p>

<p>
  Right now, it might seem like writing all of these tests is a waste of time. And certainly for a blog application, it might not really make sense to right tests. However, we believe that starting out simple is the best way to learn, and building a blog with TDD is as simple as it gets.
</p>

<p>
  In reality, you probably won't need to write tests for a simple blog application like this. However, in your career, you will need to build much larger apps than this that are used by many users. In this case, <strong>it's faster to write tests in the long run since you will be spending less time debugging and making sure everything is running correctly.</strong>
</p>

<h3>I understand that testing is important, but do I really need to always write tests first using TDD principles?</h3>

<p>
  This is quite a controversial topic. Even leaders of the Rails community have heated debates over this topic:
</p>

<!-- 16:9 aspect ratio -->
<div class="embed-responsive embed-responsive-16by9 embed_video">
  <iframe width="560" height="315" src="https://www.youtube.com/embed/z9quxZsLcfo" frameborder="0" allowfullscreen></iframe>
</div>

<p>
  However, whether or not you should be using TDD to develop your applications shouldn't be the question at this stage. Right now, you should be focusing on practicing writing tests, and you should also learn how to develop applications using TDD. It will never learn how to test or how to develop applications with TDD, you can always choose not to do it later on.
</p>  

<h3>What should I test?</h3>

<p>
  You should ideally test every feature. A developer I look up to once said, "What doesn't get tested will be broken eventually by another developer. So you better write tests for everything you write!". I believe these words to be true to a large extent.
</p>

<p>
  If you don't test something, you never know if it is working or if it's broken, until either you or a real user finds the bug. If a real user finds a bug, you are not offering the best user experience for your customers. It's not particularly a good thing at all.
</p>  

<p>
  Instead, if you try to test all of the features that you write, then you can be confident that everything is working.
</p>

<p>
  With that being said, not everything is worth testing nor is everything easy to test. Some things are extremely difficult to test. For the most part, as you gain more experience, you will learn to write code that is easy to test. Code that is easy to test means that it is easy to maintain.
</p>

<h2>Wrap Up</h2>

<p>
  Testing is an art in itself, and it takes a lot of practice to master. The key is to keep writing tests for all of your features. At a certain point, you will understand how to write tests and it won't be so difficult anymore, and you won't consider it as time consuming either.
</p>

<p>
  What we have covered in these lessons are just the beginning steps of testing. As you become a more advanced developer and work on more advanced applications, you will need to write more advanced tests. In these cases, Google is always your friend and you will always be able to find your answer.
</p>

<p>
  Congratulations on coming this far with the course! You have already learned so much in such a short period of time, and we are extremely proud of you.
</p>




































