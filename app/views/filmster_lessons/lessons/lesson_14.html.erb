<!-- 16:9 aspect ratio -->
<div class="embed-responsive embed-responsive-16by9">
  <iframe width="560" height="315" src="https://www.youtube.com/embed/aTrdrvojhdU" frameborder="0" allowfullscreen></iframe>
</div>

<p>
  Create a new Javascript file called <code>main.js</code> inside of the <code>app/assets/javascripts</code> directory.
</p>

<p>
  Inside of this file, add the following lines of code that we just used in the video above.
</p>

<pre><code class="javascript">
$(function(){
  $.ajax({
    url: 'http://www.omdbapi.com/?',
    data: {"s": "superman"}
  })
  .done(function(data){
    console.log(data);
  });
})
</code></pre>

<div class="well">
  <h3>Some New JavaScript Concepts</h3>

  <p>
    In the code above, you'll notice that everything is wrapped inside <code>$(function(){ })</code>. <strong>This is a way to execute the code only after the page has been fully loaded.</strong>
  </p>

  <%= image_tag 'filmster/curly_braces.png', class: 'img-responsive screenshot' %>

  <p>
    <code>$.ajax</code> is how you can make AJAX calls using jQuery. It has several parameters you can pass, but the most important ones are <code>url</code>, <code>data</code> and <code>type</code> (we don't use it here). 
  </p>

  <ul>
    <li><code>url</code> - the URL you are making the AJAX request to</li>
    <li><code>data</code> - the data you are passing in the AJAX request</li>
    <li><code>type</code> - the HTTP request type. By default it is set to "GET", but you can set it to "POST", "PUT", "PATCH", "DELETE", etc.</li> For now, since we want to perform a GET request, we can leave this out.
  </ul>

  <p>
    In our case, we have <code>data: {"s": "superman"}</code>. As you can see, we are passing a key value pair. When the request is sent, the data that we have here is parsed and sent like such:
  </p> 

<pre><code class="html">
http://www.omdbapi.com/?s=superman
</code></pre>

  <p>
    The code inside the <code>done</code> block is executed after the AJAX call has succeeded. The function inside <code>done</code> takes in an argument as a parameter, which represents the response data from the AJAX call.
  </p>


  <%= image_tag 'filmster/ajax_request.png', class: 'img-responsive screenshot' %>
</div>

<p>
  Now everytime we load the page, the AJAX request is going to be performed. Save the file and refresh the page. Your Google Chrome Developer Tools console should now display some data with movies that include "Spiderman" in the title.
</p>

<p>
  We've made our first AJAX request to an API, but <strong>how do we actually make use of this data that we received as a response from the server?</strong>
</p>

<h2>Displaying the data</h2>

<!-- 16:9 aspect ratio -->
<div class="embed-responsive embed-responsive-16by9">
  <iframe width="560" height="315" src="https://www.youtube.com/embed/-TmQcHlh0pw" frameborder="0" allowfullscreen></iframe>
</div>

<p>
  <strong>The first step</strong> is to create a <code>div</code> with an <code>id</code> of <code>movies</code> in <code>index.html.erb</code>. We are going to be dynamically appending new HTML elements to this element.
</p>

<p>
  The next step is to <strong>create a Javascript variable that will hold a string containing HTML</strong>.
</p>

<p>
  Create a new variable called <code>htmlString</code> and initialize it to an empty string:
</p>

<pre><code class="javascript">
$(function(){
  $.ajax({
    url: 'http://www.omdbapi.com/?',
    data: {"s": "superman"}
  })
  .done(function(data){
    let htmlString = "";
  });
})
</code></pre>

<p>
  <strong>Our strategy is to add on to <code>htmlString</code> to build an HTML string, so that we can display it to the page.</strong>
</p>

<p>
  Next, let's take the values in the <code>"Search"</code> key in the JSON data and loop through each one.
</p>

<p>
  <strong>We can do this with the <code>forEach</code> method.</strong> The <code>forEach</code> method is much like <code>each</code> in Ruby - it allows us to iterate through objects.
</p>

<p>
  Inside the <code>forEach</code> loop, we are going to add an HTML paragraph containing the movie title:
</p>

<pre><code class="javascript">
$(function(){
  $.ajax({
    url: 'http://www.omdbapi.com/?',
    data: "s=superman"
  })
  .done(function(data){
    let htmlString = "";

    data["Search"].forEach(function(movie){
      htmlString += `&lt;p&gt;${movie["Title"]}&lt;/p&gt;`;
    });

  });
})
</code></pre>

<p>
  Finally, we are going to append the string inside of <code>htmlString</code> to the <code>#movies</code> div:
</p>

<pre><code class="javascript">
$(function(){
  $.ajax({
    url: 'http://www.omdbapi.com/?',
    data: "s=superman"
  })
  .done(function(data){
    let htmlString = "";

    data["Search"].forEach(function(movie){
      htmlString += `&lt;p&gt;${movie["Title"]}&lt;/p&gt;`;
    });

    $("#movies").append(htmlString);
  });
})
</code></pre>

<p>
  Save the file and refresh the page. You should now see all of the movie titles displayed on the page!
</p>

<p>
  You can even try changing the <code>data</code> being passed in the AJAX request to see the title names change.
</p>

<h2>Overview</h2>

<ul>
  <li>We use AJAX to perform a GET request to the OMDb API</li>
  <li>We receive data back and respond with <code>done</code></li>
  <li>We create a Javascript variable called <code>htmlString</code> to hold a string of HTML</li>
  <li>We loop through each movie in the search result and add the movie title to <code>htmlString</code></li>
  <li>We append <code>htmlString</code> to the <code>#movies</code> element</li>
</ul>

<p>
  Once you understand this flow, using AJAX to display elements on to the web page is fairly easy.
</p>

<h2>Refactoring</h2>

<p>
  Let's move the function after <code>.done</code> into a seperate function to make it a little bit cleaner:
</p>


<pre><code class="javascript">
$(function(){
  $.ajax({
    url: 'http://www.omdbapi.com/?',
    data: {"s": "superman"}
  })
  .done(function(data){
    displayMovies(data);
  });

  function displayMovies(data){
    let htmlString = "";

    data["Search"].forEach(function(movie){
      htmlString += `&lt;p&gt;${movie["Title"]}&lt;/p&gt;`;
    });

    $("#movies").append(htmlString);
  }
});
</code></pre>

<p>
  Next, let's not only display the title, but also the year and the poster image. Change your <code>displayMovies</code> function to look like this:
</p>

<pre><code class="javascript">
function displayMovies(data){
  let htmlString = "";

  data["Search"].forEach(function(movie){
    htmlString += `&lt;img src=${movie["Poster"]} /&gt;
                   &lt;p&gt;${movie["Title"]}&lt;/p&gt;
                   &lt;p&gt;${movie["Year"]}&lt;/p&gt;`;
  });

  $("#movies").append(htmlString);
}
</code></pre>

<p>
  You should now see the image, title, and year of each movie. Awesome! 
</p>











