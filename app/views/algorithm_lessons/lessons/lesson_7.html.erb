<p>
  Queues are similar to stacks, except queues are a <strong>FIFO (First In First Out)</strong> data structure.
</p>

<p>
  Queues are like a group of people lined up to ride a rollercoaster - the first people who lined up are the first people who will be leave the line and ride the rollercoaster.
</p>

<p>
  Queues have two main operations, <strong>enqueue</strong> and <strong>dequeue</strong>. <strong>Enqueue</strong> works similarly to <strong>push</strong> in an array - it inserts an element onto the queue. <strong>Dequeue</strong> is the opposite of <code>pop</code> - it returns the <strong>first element</strong> that was pushed into the queue. With the pop operation of the stack, the last element that will be returned.
</p>

<h2>Assignment</h2>

<ol>
  <li>Implement the <code>enqueue</code> method</li>
  <li>Implement the <code>dequeue</code> method</li>
  <li>Implement the <code>peek</code> method, which returns the most first element on the element (it shouldn't dequeue the element)</li>
  <li>Implement the <code>size</code> method, which returns the size of the queue</li>
  <li>Implement the <code>empty?</code> method, which returns <code>true</code> if the queue is empty and <code>false</code> if it is not empty</li>
  <li>Make all tests pass</li>
</ol>

<h2>Hints</h2>

<p>
  You can use an array to implement a queue.
</p>