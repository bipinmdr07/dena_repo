<p>
  Stacks are a <strong>data structure</strong> that will be useful when you solve various technical problems.
</p>

<p>
  Stacks are like a stack of dishes. You can place dishes on top of each other. The last dish that you placed is the first dish that you will be using, since it is on top. The first dish that you placed in the stack is the last dish you will be using, since it is on the very bottom. The dishes are last in, first out.
</p>

<p>
  Stacks operate the same way. It is a <strong>LIFO (Last In First Out)</strong> data structure. 
</p>

<p>
  <strong>Stacks have two main operations, <strong>push</strong> and <code>pop</code></strong>. You can <strong><em>push</em></strong> elements into the stack (putting a dish on the stack), or you can <strong><em>pop</em></strong> elements from the stack (taking a dish from the stack).
</p>  

<p>
  Stacks are just a data structure, or a way to store data, that allow you to push elements in the stack, or pop elements from the top of the stack. They are useful when trying to reverse the order of things. For example, if you take a stack of dishes and create a new stack of dishes by taking one dish one by one, you will have reversed the order of the dishes.
</p>  

<h2>Assignment</h2>

<ol>
  <li>Implement the <code>push</code> method</li>
  <li>Implement the <code>pop</code> method</li>
  <li>Implement the <code>peek</code> method, which returns the most top element on the stack (it shouldn't pop it off the stack)</li>
  <li>Implement the <code>size</code> method, which returns the size of the stack</li>
  <li>Implement the <code>empty?</code> method, which returns <code>true</code> if the stack is empty and <code>false</code> if it is not empty</li>
  <li>Make all tests pass</li>
</ol>

<h2>Hints</h2>

<p>
  You can use an array to create a stack.
</p>