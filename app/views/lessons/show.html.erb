<% title(get_lesson_title(controller_name.classify, params[:id]) + " | TECHRISE") %>

<style type="text/css">
.course_html {
  background: white;
}
</style>


<div class="row">

  <%= react_component 'SidebarLeft', { display_sm: false,
                                      authenticity_token: form_authenticity_token, 
                                      track: @track,
                                      course_name: @course_name.to_s,
                                      chapter_title: @chapter_title,
                                      lesson_id: params[:id] } %>


    <section class="lesson_content">

      <h1><%= title_for(@course_name, params[:id].to_i) %></h1>

      <div id="lesson_text">
        <%= render file: "app/views/#{@current_course_link}/lessons/lesson_#{@current_lesson_id}" %>
      </div>
      
      <br class = "clear">

      <%= render partial: 'layouts/hints' if @hints %>

      <% if @submission_form && @submission_by_current_user.nil? %>
        <div class="well">
          <%= render partial: 'shared/flash_messages' %>

          <h2>Submit your work</h2>
          <p>
            Awesome work! Follow the directions on the lesson and submit your work. We'll get back to you soon and give you feedback or code review.
          </p>

          <%= react_component 'SubmissionForm', { lesson_id: params[:id], course_name: controller_name.classify } %>

        </div>
      <% end %>

      <div id="lesson_nav_container">
        <%= render partial: 'lesson_nav_section', locals: {quiz_completed: @quiz_completed, current_lesson_progression: @current_lesson_progression} %>
      </div>

      <%= render partial: '/submissions/for_lesson' if @submission_form %>

      <%= render partial: '/questions/for_lesson' %>

      <%= render 'git_workflow_modal' %>

    </section>


  <%= react_component 'SidebarRight', { display_sm: false,
                                        authenticity_token: form_authenticity_token, 
                                        lesson_id: params[:id], 
                                        course_name: controller_name.classify,
                                        lesson_url: request.original_url,
                                        quizCompleted: @quiz_completed,
                                        user_is_admin: current_user.admin } %>


</div>

<script type="text/javascript">

var hints;
hints = {
  show_next_gotcha: function(el) {
    var gotcha = $(".gotcha[data-gotcha-id=" + el.data("gotcha-id") + "]");

    if (gotcha.length === 0) {
      this.show_all();
    } 
    else {
      this.show_hint(gotcha);
      // display elements with data-hint-id that is <= el.data-hint-id  
      this.show_preceding_hints(gotcha);
      // - Increment btn-gotcha data-gotcha-id
      // el.data("gotcha-id", el.data("gotcha-id") + 1);

      if (!this.has_next("gotcha", el.data("gotcha-id"))) {
        this.disable_button(el);
      }    

      console.log(el.data("hint-id"));
      if(!this.has_next("hint", el.data("hint-id"))) {      
        this.disable_button($("#btn-hint"));      
      } 

      this.scroll_to(gotcha);
    }
  },
  show_next_hint: function(el) {
    var hint = $(".hint[data-hint-id=" + el.data("hint-id") + "]");
    this.show_preceding_hints(hint);

    console.log(el.data("hint-id"));
    if (!this.has_next("hint", el.data("hint-id"))) {
      this.disable_button(el);
    }

    this.scroll_to(hint);
  },
  has_next: function(class_name, next_id){
    return ($("." + class_name +  "[data-" + class_name + "-id=" + next_id + "]").length !== 0);
  },
  disable_button: function(el){    
    el.prop("disabled", true);
  },
  show_preceding_hints: function(el){
    var hints = $('[data-hint-id]').filter(function(){
      return $(this).data("hint-id") <= el.data("hint-id");
    }); 

    var that = this;
    $.each(hints, function(){      
      that.show_hint( $(this) );
      // if gotcha element was inside the displayed hints, updated btn-gotcha data-gotcha-id
      if ($(this).attr("class").includes('gotcha')) {
        $("#btn-gotcha").data("gotcha-id", $(this).data("gotcha-id") + 1);

        if (!that.has_next("gotcha", $("#btn-gotcha").data("gotcha-id"))) {
          that.disable_button($("#btn-gotcha"));
        }
      }
    });
     // - Increment btn-hint data-hint-id 
    $("#btn-hint").data("hint-id", el.data("hint-id") + 1);  
    $("#btn-gotcha").data("hint-id", el.data("hint-id") + 1);   
  },
  show_all: function(){
    this.show_hint($(".hint"));
    this.show_hint($(".gotcha"));
    $("#btn-hint").prop("disabled", true);
    $("#btn-gotcha").prop("disabled", true);
    $("#btn-all-hints").prop("disabled", true);
    this.scroll_to($(".hint")[0]);    
    return;
  },
  show_hint: function(el){
    el.fadeIn();
    el.addClass("hint-activated");
    window.setTimeout(function(){
      el.removeClass("hint-activated");
    }, 10000);
  },
  scroll_to: function(el) {
    $('html,body').animate({ 
        scrollTop: el.offset().top - 50
    }, 800);
  }
}  

$("#btn-gotcha").on("click", function(){
  hints.show_next_gotcha($(this), "gotcha-id");  
});

$("#btn-hint").on("click", function(){
  hints.show_next_hint($(this), "hint-id");
});

$("#btn-all-hints").on("click", function(){
  hints.show_all();
});


$(document).on('turbolinks:load', show_page_trigger);

$(document).on('turbolinks:load', function(){
  if ($(".hint").length === 0) {
    $("#btn-hint").prop('disabled', true);
    $("#btn-gotcha").prop('disabled', true);
    $("#btn-all-hints").prop('disabled', true);
  }

});
</script>
