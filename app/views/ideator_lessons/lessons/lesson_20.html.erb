

<p>
  The first thing we are going to add on to our app is <strong>pagination</strong> to our <code>index</code> page. Basically the gist is, when we display all of our ideas on the <code>index</code> page, when we have 100 ideas on there, users have to scroll forever to get to the bottom of the page. Instead, we probably want to divide them into seperate pages, or in other words, <em>paginate</em> them.
</p>

<p>
  Luckily, rails provides a gem for this that makes this super easy. We're going to be using a gem called <code>will_paginate</code>.
</p>

<p>
  Go to the documentation page <a href="https://github.com/mislav/will_paginate" target="_blank">here</a>. We're going to be following the instructions from here.
</p>

<p>
  The first thing they tell us to do is to add this line in the Gemfile:
</p>

<pre><code class="ruby">
gem 'will_paginate', '~> 3.1.0'
</code></pre>

<p>
  Let's go ahead and add that into your Gemfile, then run <code>bundle install</code> in the terminal to install it. After we do that, what should we do?
</p>

<%= render partial: '/shared/quizzes', locals: { question: 'Show me the answer!', answer: "Restart the server ;)", number: 1 } %>

<br class="clear">

<p>
  Now if we look at the documentation under "Basic will_paginate use", it looks like implementing this is pretty simple.
</p>

<p>
  Basically, we can just stick <code>.paginate(:page => params[:page], :per_page => 30)</code> after <code>@ideas = Idea.all</code> in our <code>ideas_controller.rb</code>and it will work perfectly. We can also adjust the <code>:per_page</code> option to set the number of objects per page it displays. For example, if we set <code>:per_page</code> to <code>10</code>, it would only display 10 ideas per page. 
</p>

<p>
  In our <code>ideas_controller.rb</code>, let's modify our code in the <code>index</code> method.
</p>  

<pre><code class="ruby">
def index
  @ideas = Idea.all.paginate(:page => params[:page], :per_page => 10)
end
</code></pre>

<p>
  While we're at it, right now if you add an idea, it isn't displayed at the top. We should make it so that the newest ideas are displayed first. <strong>We can do this by ordering it by the time it was created at.</strong>
</p>

<p>
  Inside the <code>index</code> method, let's modify the code so that it looks like this:
</p>

<pre><code class="ruby">
def index
  @ideas = Idea.order("created_at DESC").paginate(:page => params[:page], :per_page => 10)
end
</code></pre>

<p>
  Awesome, now let's go back into the documentation. It also tells us how to render the page links in the view:
</p> 

<pre><code class="ruby">
## perform a paginated query:
@posts = Post.paginate(:page => params[:page])

# or, use an explicit "per page" limit:
Post.paginate(:page => params[:page], :per_page => 30)

## render page links in the view:
&lt;%= will_paginate @posts %&gt;
</code></pre>

<p>
  Let's go ahead and implement this in our views. Go into <code>index.html.erb</code> and add this in to the very bottom of the page:
</p>

<pre><code class="erb">
&lt;%= will_paginate @ideas %&gt;
</code></pre>

<p>
  Let's hop back into our browser and go to the home page to see if this actually worked.
</p>

<p>
  You might notice that nothing shows up. This is probably because you don't have 10 ideas in the database right now. You can either add 10 ideas, or change the <code>:per_page</code> in your <code>ideas_controller.rb</code> to something smaller to a number like 3.
</p>

<p>
  Once you do that, it should be fully working. Let's refresh the page.
</p>

<p>
  We see now that the pagination links are there at the bottom of the page, but they aren't centered. Let's go ahead and center them. We can do this by using bootstrap's <code>text-center</code> class. Change your code to look like this:
</p>

<pre><code class="erb">
&lt;div class = "text-center"&gt;
  &lt;%= will_paginate @ideas %&gt;
&lt;/div&gt;
</code></pre>

<p>
  Refresh the page and you should see that the page links are now centered. Cool!
</p>

<%= standard_git_workflow %>
