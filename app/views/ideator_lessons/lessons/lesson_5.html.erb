<h1><%= title_for(IdeatorLesson, 3, 1) %></h1>

<p>
	Now that we’ve got our first page running, let’s install bootstrap so that we can make our page look awesome.
</p>

<p>
	This time with rails, instead of using the CDN to use bootstrap, we are going to use a <strong>gem</strong>. <strong>Gems are basically super useful packages of code that solve common problems</strong>, for instance installing bootstrap in this case. There are gems for mostly every common problem - forms, user log in/authentication, messagers, etc. <strong>Smart people have created these solutions for us already so it’s stupid to reinvent the wheel most of the time.</strong>
</p>

<p>Let’s go ahead and install our first gem.</p>

<p>In sublime, let’s open up <code>gemfile</code>. You’ll see a bunch of gems inside this file.</p>

<p>
	In order to install bootstrap, we're going to add the <code>bootstrap-sass</code> gem here. The documentation can be found <a href="https://github.com/twbs/bootstrap-sass" target="_blank">here</a>. Typically, the instructions on how to install and use these gems are written inside the documentation. Let's look at the documentation and follow the instructions.
</p>

<p>Like the documentation tells us, inside our <code>gemfile</code> let’s add</p>
<pre><code class="bash">
gem 'bootstrap-sass', '~> 3.3.6'
</code></pre>

<p>Next, inside our console let’s run</p>

<pre><code class="bash">
bundle install
</code></pre>

<p>
	This will install the gems for us. <strong>Every time we run bundle install, we have to restart the server.</strong> Let’s go back into the console where the server is running and restart it.
</p>

<div class="well">
  <h3>How to restart the server</h3>
  <p>To restart the server, first hit <code>Command + C</code> to stop the server. Then to start the server again, hit the up arrow and press enter, or type in <code>rails server</code> again.</p>
</div>

<p>Awesome. Next, it’s telling us to rename <code>application.css</code> to <code>application.scss</code>. We could manually rename it, but the documentation also gives us a simple command that we can run in the console that does just this.</p>

<pre><code class="bash">
mv app/assets/stylesheets/application.css app/assets/stylesheets/application.scss
</code></pre>

<p>Let’s run that command to rename the file.</p>

<p>Now inside <code>application.scss</code>, let’s copy and paste the following code like this:</p>

<pre><code class="bash">
@import "bootstrap-sprockets";
@import "bootstrap";
</code></pre>

<p>Your <code>application.scss</code> should now look like this.</p>


<pre><code class="bash">
/*
 * This is a manifest file that'll be compiled into application.css, which will include all the files
 * listed below.
 *
 * Any CSS and SCSS file within this directory, lib/assets/stylesheets, vendor/assets/stylesheets,
 * or any plugin's vendor/assets/stylesheets directory can be referenced here using a relative path.
 *
 * You're free to add application-wide styles to this file and they'll appear at the bottom of the
 * compiled file so the styles you add here take precedence over styles defined in any styles
 * defined in the other CSS/SCSS files in this directory. It is generally better to create a new
 * file per style scope.
 *
 *= require_tree .
 *= require_self
 */
@import "bootstrap-sprockets";
@import "bootstrap";
</code></pre>

<p>The documentation tells us to remove all the <code>*= require_self</code> and <code>*= require_tree .</code> statements from the sass file but <strong>let’s not worry about this and ignore it.</strong></p>

<p>Next it tells us to copy and paste this into <code>application.js</code></p>

<pre><code class="bash">
//= require jquery
//= require bootstrap-sprockets
</code></pre>

<p>Your <code>application.js</code> should now look like this:</p>

<pre><code class="bash">
//= require jquery
//= require bootstrap-sprockets
//= require jquery_ujs
//= require turbolinks
//= require_tree .
</code></pre>

<p>In the documentation, it says to make sure that <code>//= require bootstrap-sprockets</code> doesn't come before <code>//= require jquery</code>. Let's make sure the order of everything is just like above so we don't get any errors.</p>

<p>Awesome. You should now be set.</p>

<p>Refresh <code>localhost:3000</code> and your font should have changed into a different font. That means your bootstrap has been installed! Great job!</p>

<div class="well">
  <h3>Not working?</h3>
  <p>
    Whenever your app is not behaving like it should be after installing a gem or changing something, you want to make sure that you <strong>restart the server</strong>. Make sure to restart the server and a lot of times the problems will be fixed :)
  </p>
</div>

<p>
	Let’s now commit this to GitHub so we don’t lose any of the changes.
</p>

<pre><code class="bash">
git add .
git commit -am “Add bootstrap”
git push origin master
</code></pre>




<script>
$( '#HideHighFive' ).click(function() {
	$( '#HideHighFive' ).hide();
	$( " #HighFive " ).show();
  $( " #HighFive " ).hide( "puff", {percent:500}, 2000 );
  $( '#HideHighFive' ).delay(2000).show(0);
});
</script>

