<h1><%= title_for(IdeatorLesson, 5, 2) %></h1>

<p>
  In our form, let's think about what we want to do if a user enters invalid data. For example, if a user tries to enter an idea without specifying an <code>author</code>, we should probably not accept that. We should also not accept an idea that doesn't contain a <code>description</code>.
</p>

<p>
  In Ruby on Rails, we can make sure that these kinds of invalid data do not get stored in the database by using <strong>validations</strong>.
</p>

<%= create_flashcard %>

<p>
  There are different kinds of validations that you can use in rails (read about them <a href="http://guides.rubyonrails.org/active_record_validations.html" target="_blank">here</a>).
</p>

<p>
  For now, let's write a validatation to make sure that the <code>description</code> and <code>author</code> exists for every <code>Idea</code>.
</p>

<p>
  <strong>Validations are added inside the model file.</strong> Open <code>idea.rb</code>. This is the model file for <code>idea</code>, since it is located inside the <code>app/models</code> directory. This is where we can add our validation. Inside your <code>idea.rb</code>, let's add the following piece of code to look like this:
</p>

<pre><code class="ruby">
class Idea &lt; ActiveRecord::Base
  validates :description, :author, presence: true
end
</code></pre>

<p>
  So here we are saying that we want to validate that the <code>presence</code> is <code>true</code> for <code>:description</code> and <code>:author</code>.
</p>

<p>
  Let's take another look at the <code>update</code> method:
</p>

<pre><code class="ruby">
def update
  @idea = Idea.find(params[:id])
  if @idea.update(idea_params)
    redirect_to root_path
  else
    redirect_to edit_idea_path(params[:id])
  end
end
</code></pre>

<p>
  When a validation fails, the data is not saved into the database and will return a value of <code>false</code>.
</p>

<p>
  If a user passes in invalid data, (in this case not filling in the <code>author</code> or <code>description</code>), then the validation we just added will cause <code>@idea.update(idea_params)</code> to return <code>false</code>, thus it will go to the <code>else</code> statement and redirect you to the editing page once again.
</p>

<p>
  Let's refactor the <code>create</code> method as well:
</p>

<pre><code class = "ruby">
def create
  @idea = Idea.create(idea_params)
  if @idea.valid?
    redirect_to root_path
  else
    render :new
  end
end
</code></pre>

<p>
  We can validate if the <code>Idea</code> that was created was valid with the <code>.valid?</code> method. If the <code>Idea</code> is valid, <code>@idea.valid?</code> will return <code>true</code>. Otherwise, it will return <code>false</code>.
</p>

<p>
  If the <code>Idea</code> is valid, it will redirect to the <code>root_path</code>. Otherwise, it will render the <code>new</code> template.
</p>

<p>
 Awesome. Congratulations on writing your first validation!
</p>

<%= standard_git_workflow %>