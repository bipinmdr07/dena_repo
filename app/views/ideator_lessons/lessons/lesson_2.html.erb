

<p>
	Now that we’ve set up our project, let’s also set up GitHub so that we can save our project online and go back to previous versions when we want to.
</p>

<p>
	First, we have to set up our SSH keys. Follow <a href = "https://help.github.com/articles/generating-ssh-keys/" target = "_blank">this guide</a> to do so. <strong>Follow each step in the guide from "Checking for existing SSH keys" to "Testing your SSH connection".</strong>
</p>

<p>After you've completed everything in that link, <strong>open up a second terminal window</strong>. You should now have 2 terminal windows open. One terminal window should be running the rails server.</p>

<div class="well">
  <h3>Having Two Terminal Windows Open</h3>
  <p>
    We want to have two terminal windows open. This is because we want <strong>one for running the server and one for typing in rails commands</strong>.
  </p> 

  <p>
    You can create a new terminal window in C9 like this:
  </p>

  <%= image_tag 'ideator/new_terminal_window.png', class: 'img-responsive screenshot' %>

  <p>
    One terminal will look like this, where you can type in commands:
  </p>

  <%= image_tag 'ideator/terminal_window.png', class: 'img-responsive screenshot' %>

  <p>
    We also need another terminal window for running the server:
  </p>  

  <%= image_tag 'ideator/server_window.png', class: 'img-responsive screenshot' %>

  <p>
    You'll notice that the terminal window that is running the server will not respond to anything that you type in. <strong>You can only execute commands in terminal windows that don't have a server running on it (the terminal window in the first screenshot).</strong>
  </p>
</div>

<p>
  In the terminal window for running commands, let's run the following command:
</p>

<pre><code class="bash">
git init .
</code></pre>

<p>
  It should give you a message like this in the terminal:
</p>

<pre><code class="bash">
Initialized empty Git repository in /home/ubuntu/workspace/.git/
</code></pre>

<p>
  Next, let's run the following commands:
</p>

<pre><code class="bash">
git add .
</code></pre>

<pre><code class="bash">
git commit -am “Initial commit”
</code></pre>

<p>
	Now let’s go into GitHub’s front page and create a new repository. On the left-hand side, you should see a <strong>green button called “+ New repository”</strong>. Click on that button and just fill in the box that says <strong>“Repository name”</strong>.
</p>

<p class="alert alert-warning">
	<strong>Make sure you don’t check “Initialize this repository with a README”.</strong>
</p>

<p>
	Now click <strong>Create repository</strong>. 
</p>

<p>
	On the next page, go to the sections that says <strong>“…or push an existing repository from the command line”</strong>.
</p>

<p>
	Copy the code right beneath that and paste it into your terminal. It should look something like this:
</p>

<pre><code class="bash">
git remote add origin git@github.com:YourGithubUsername/ideator.git
</code></pre>

<pre><code class="bash">
git push -u origin master
</code></pre>

<p class="alert alert-danger">
  Make sure you replace <code>git@github.com:YourGithubUsername/ideator.git</code> with your username.
</p>

<p>
  When you run this command, it might ask you for your username and password. If it does, then enter your Github username and Github password. 
</p>

<p>
  Once you are done with this process, let's make sure that everything is setup correctly. In your terminal, run the following command:
</p>

<pre><code class="bash">
git remote -v
</code></pre>

<p>
  In your terminal window, the following lines should be outputted:
</p>

<pre><code class="bash">
origin  git@github.com:YourGithubUsername/ideator.git (fetch)
origin  git@github.com:YourGithubUsername/ideator.git (push)
</code></pre>

<p>
  If nothing is outputted, then chances are that you missed a step. Try following every step carefully and make sure not to make typos.
</p>

<p>
	You’re all set! Your GitHub is set up and ready to go!
</p>

<h3>Setting Up Heroku</h3>

<p>
  Heroku is a service that lets you deploy your application live extremely easily. Professional teams use Heroku because of how easy it is to use it. It allows you to push your code live in no time!
</p>

<p>
  <strong>First, go to <%= link_to 'Heroku', 'http://heroku.com/', target: '_blank' %> and create a new Heroku account.</strong>
</p>

<p>
  Next, in your C9 terminal, enter the following command:
</p>

<pre><code class="bash">
wget -O- https://toolbelt.heroku.com/install-ubuntu.sh | sh 
</code></pre>

<p>
  This command will install and update the Heroku Toolbet, which is necessary to deploy your applications on to Heroku from the command line.
</p>

<p>
  Once it is finished installing, open up your <code>Gemfile</code> in C9. You can find this file by pressing <CODE>CTRL + P</CODE> or <code>CMD + P</code> on Mac, then typing <code>Gemfile</code>.
</p>

<%= image_tag 'ideator/ctrl_p.png', class: 'img-responsive screenshot' %> 

<p>
  There are several types of databases, such as MySql, sqlite3, Postgresql. Heroku only supports Postgresql, so we need to change our settings so that our application runs on Postgresql.
</p>

<p>
  In the <code>Gemfile</code>, find the following lines of code:
</p>

<pre><code class="ruby">
# Use sqlite3 as the database for Active Record
gem 'sqlite3'  
</code></pre>

<p>
  Replace <code>sqlite3</code> with <code>pg</code>. Your <code>Gemfile</code> should now look like this:
</p>

<pre><code class="ruby">
# Use pg as the database for Active Record
gem 'pg'  
</code></pre>

<p>
  Next, in your terminal window, run <code>bundle install</code>.
</p>

<%= image_tag 'ideator/bundle_install.png', class: 'img-responsive screenshot' %> 

<p>
  The <code>bundle install</code> command will install the <em>gems</em> included in the <code>Gemfile</code> (more on gems later).
</p>

<p>
  <strong>Next, open your <code>database.yml</code> file</strong>. Again, <CODE>database.yml</CODE> holds the database configuration for your application. 
</p>

<p>
  Replace the file contents with the following lines of code:
</p>

<pre><code class="yaml">
default: &default
      adapter: postgresql
      encoding: unicode
      pool: 5
      username: username
      password: password
      host:     &lt;%= ENV['IP'] %&gt;

development:
  &lt;&lt;: *default
  database: ideator_development

test:
  &lt;&lt;: *default
  database: ideator_test

production:
  &lt;&lt;: *default
  database: ideator_production
</code></pre>

<p>
  Next, let's first commit (save) the changes we have made to GitHub. In the terminal, run the following commands:
</p>  

<pre><code class="bash">
bundle install
git add .
git commit -am "change database to postgresql"
git push origin master
</code></pre>

<p>
  Next, in your terminal window, run the following command (make sure there is a dollar sign):
</p>

<pre><code class="bash">
sudo service postgresql start  
</code></pre>

<p>
  Next, run this command:
</p>

<pre><code class="bash">
sudo sudo -u postgres psql  
</code></pre>

<p>
  You will see a new console appear. Instead of the <code>$</code> sign, you should see <code>postgres=#</code>
</p>

<%= image_tag 'ideator/psql.png', class: 'img-responsive screenshot' %> 

<p>
  Inside this console, type in the following command:
</p>

<pre><code class="bash">
CREATE USER username SUPERUSER PASSWORD 'password';
</code></pre>

<p>
  Next, type in the following commands:
</p>

<pre><code class="bash">
UPDATE pg_database SET datistemplate = FALSE WHERE datname = 'template1';  
DROP DATABASE template1;
CREATE DATABASE template1 WITH TEMPLATE = template0 ENCODING = 'UNICODE';
UPDATE pg_database SET datistemplate = TRUE WHERE datname = 'template1';
\c template1
VACUUM FREEZE;
</code></pre>

<p>
  Next, quit of of the postgres console by running this command:
</p>

<pre><code class="bash">
\q  
</code></pre>

<p>
  Once we've finished these steps, we're ready to deploy our new application to Heroku.
</p>

<p>
  To create a new application, we can run the <code>heroku create</code> command.
</p>

<pre><code class="bash">
heroku create app_name  
</code></pre>

<p>
  Change <code>app_name</code> to the name of the application. 
</p>

<p>
  If it asks you for your Heroku credentials, enter your email address and password.
</p>

<%= image_tag 'ideator/heroku_create.png', class: 'img-responsive screenshot' %>  

<p>
  As you can see, it creates a url that anyone can visit. For example, take a look at the above screenshot (<code>https://techrise-ideator.herokuapp.com/</code>).
</p>

<p>
  <strong>Now let's push our application to Heroku.</strong>
</p>

<p>
  In the terminal, enter the following command:
</p>

<pre><code class="bash">
git push heroku master  
</code></pre>

<p>
  It will take some time for everything to be uploaded to the Heroku server. Once it has finished uploading, we need to migrate our database. In the terminal, enter the following command:
</p>

<pre><code class="bash">
heroku run rake db:migrate  
</code></pre>

<p>
  After this step is finished, our last step is to restart our server. We can do this by running the following command in the terminal:  
</p>

<pre><code class="bash">
heroku restart  
</code></pre>

<p>
  Now if you go to the application URL, you should see a new Rails application deployed. Congratulations, you've deployed your first Rails application!
</p>






