

<p>
  Now that we've got a model and a controller for our Ideas, we can start interacting with the database. Get ready to do some web developerly things!
</p>

<p>
  Let's go to our terminal (the one that is not running the rails server) and type in <code>rails console</code> (or <code>rails c</code> for short) to open up the rails console. In the rails console, we can type in ruby code to interact with our rails application.
</p>

<div class="well">
  <h3>Rails Console</h3>

  <p>
    The rails console is used to execute ruby commands. However, you cannot run commands such as <code>git add .</code> or <code>rake routes</code> since they are not commands written in the ruby language.
  </p>

  <p>
    When you want to run commands that are not in the ruby language, make sure to exit out of the rails console. You can do that by typing in the following command:
  </p>

<pre><code class="bash">
exit
</code></pre>
</div>

<p>
  First, let's create an idea in our database through the console. Type in the following in the rails console:
</p>

<pre><code class="ruby">
Idea.create(description: "This is the greatest idea ever", author: "Me")
</code></pre>

<p>
  Press enter to create the idea and save it into the database.
</p>

<div class="well">
  <h3>create</h3>

  <p>
    In previous lessons, we created database migrations and added in the ideas table to our database. Now that we've got a table to store our information in, how can we actually save our ideas into the database?
  </p>

  <p>
    Rails offers a method called <code>create</code>. <strong>The <code>create</code> method will create a new instance of the object and save it into the database.</strong>
  </p>

  <%= create_flashcard %>

  <p>
    For instance, if we want to create a new idea, we can run the following command:
  </p>  

<pre><code class="ruby">
Idea.create
</code></pre>

  <p>
    However, this will create an <code>Idea</code> object that is <strong><em>empty</em></strong>.
  </p>

<pre><code class="ruby">
Idea.create(description: "This is the greatest idea ever", author: "Me")
</code></pre>

  <p>
    In this case, we are passing in <code>description: "This is the greatest idea ever", author: "Me"</code> as the parameters. By passing these values as parameters, we are telling Rails what the description should be and who the author should be for the idea.
  </p>

  <%= image_tag 'ideator/create.png', class: 'img-responsive screenshot' %>


  <%= create_flashcard %>

  <p>
    In short, you can create an instance of an object with the following format:
  </p>

<pre><code class="ruby">
ModelName.create(column_name_1: value, column_name_2: value, ...)
</code></pre>

</div>

<p>
   Now let's try to display all of our ideas in the console. We can do this by typing the following:
</p>

<pre><code class="ruby">
Idea.all
</code></pre>

<div class="well">
  <h3>all</h3>

  <p>
    You can display all instances of an object in the rails console with the <code>all</code> method. For example, let's say we have 10 ideas stored in our database. We can display all 10 of these ideas in the rails console by running this command:
  </p>

<pre><code class="ruby">
Idea.all
</code></pre>

  <%= create_flashcard %>
</div>

<p>
This is going to print out something like below:
</p>

<pre><code class="bash">
=&gt; #&lt;ActiveRecord::Relation [#&lt;Idea id: 1, author: "Me", created_at: "2016-01-13 06:44:28", updated_at: "2016-01-13 06:44:28", description: "This is the greatest idea ever"&gt;]
</code></pre>

<p>
  Let's add some more ideas. Type in the following command in the rails console:
</p>

<pre><code class="bash">
Idea.create(description: "Apples are almost pears.", author: "Fruit Expert")
</code></pre>

<p>
  Think of some other brilliant ideas to add to your app and add a couple more. Once you've done that, take a look at your ideas by typing in <code>Idea.all</code> once again.
</p>

<p>
  You can see that you've successfully added the ideas to your database.
</p>

<p>
  Awesome! You've created your first ideas and stored them in the database. Next, let's try to show everything we stored in the database on to our website.
</p>

<p>
  First, let's make sure we exit from the rails console. Type the following in the terminal to exit out of the rails console:
</p>

<pre class="bash"><code>
exit
</code></pre>

<h3>Fetching Records from the Controller</h3>

<p>
  Next, let's go into our <code>ideas_controller.rb</code> and see what we can do.
</p>

<p>
  In our <code>index</code> method, let's add the following:
</p>

<pre><code class="ruby">
def index
  @ideas = Idea.all
end
</code></pre>

<p>
  Here we are assigning <strong>all ideas stored in the database into an instance variable</strong> called <code>@ideas</code>.
</p>

<p>
  Next, let's go into <code>index.html.erb</code> inside the <code>app/ideas</code> directory and change it to look like the following. We'll go over what we are doing and the new syntax right after this.
</p>

<pre><code class="erb">
&lt;% @ideas.each do |idea| %&gt;
  &lt;h3&gt;&lt;%= idea.description %&gt;&lt;/h3&gt;
  &lt;h4&gt;&lt;%= idea.author %&gt;&lt;/h4&gt;
&lt;% end %&gt;
</code></pre>

<p>
  Let's go back into our browser and refresh the page. You should now see all of your ideas listed out.
</p>

<p>
  It seems the things we stored in the database are now being displayed. <strong>There's a bunch of new things here, but don't panic</strong> - let's go over them step by step.
</p>

<div class="well">
  <h3>How Models, Controllers, and Views Work Together in Rails</h3>
  
  <p>
    Let's take a look at the MVC diagram from previous lessons:
  </p>

  <%= image_tag 'ideator/mvc.png', class: 'img-responsive screenshot' %>

  <p>
    To review:
  </p>

  <ul>
    <li><strong>Models</strong>: responsible for fetching data from the database and storing data into the database</li>
    <li><strong>Views</strong>: responsible for presenting information</li>
    <li><strong>Controllers</strong>: responsible for being the bridge between the model and the views</li>
  </ul>

  <p>
    Let's take a look at how our application is working.
  </p>  

  <p> 
    <strong>First</strong>, when we visit the our webpage, it makes a request to the server. 
  </p>

  <p>
    <strong>Next</strong>, the <strong>router</strong> determines which <strong>controller action</strong> to trigger. In this case, the <code>index</code> action of <code>ideas_controller.rb</code> is triggered (refer back to previous lessons to review).
  </p>

  <p>
    Inside <code>ideas_controller.rb</code>, <strong>we fetch all <code>Idea</code> objects in the database and store it into an instance variable @ideas</strong>.
  </p>

  <p>
    <strong>When we fetch all of the <code>Idea</code> objects in the database, the <strong><em>model</em></strong> is performing that task</strong> (<strong>Models</strong>: responsible for fetching data from the database and storing data into the database).
  </p>

  <%= image_tag 'ideator/mvc_1.png', class: 'img-responsive screenshot' %>

  <p>
    <strong>Instance variables declared in controller actions can be used in the view file:</strong> 
  </p>

  <%= image_tag 'ideator/mvc_2.png', class: 'img-responsive screenshot' %>  

  <p> 
    Here's a diagram that shows how everything is working together:
  </p>

  <%= image_tag 'ideator/mvc_3.png', class: 'img-responsive screenshot' %>  

</div>

<h3>What's this new syntax <% %>?</h3>

<p>
  So far, we have saved all of our view files as <code>filename.html.erb</code>. <code>erb</code> stands for <strong>Embedded Ruby</strong>. As mentioned briefly in a previous lesson, <strong>using the <code>erb</code> file extension enables us to embed ruby code into HTML.</strong>
</p>

<p>
  We can embed ruby code with the <code>&lt;% %&gt;</code> syntax. To display the result of running the ruby code to the HTML, we use <code>&lt;%= %&gt;</code>. 
</p>

<p>
  For example:
</p>

<pre><code class="erb">
&lt;!-- without the %=, it won't display the result of running the ruby code to the user --&gt;
&lt;% number = 1 + 1 %&gt;

&lt;!-- with %= it will display the result of running the ruby code to the user --&gt;
&lt;%= number %&gt;
</code></pre>

<p>
  The above code will result in the following HTML:
</p>

<pre><code class="html">
2
</code></pre>

<h3>Overview</h3>

<ul>
  <li>We tell the <strong>model</strong> to fetch all records of <code>Idea</code> in the database</li>
  <li>The <strong>model queries the database</strong> for all records of <code>Idea</code></li>
  <li>The model then returns back all records to the <strong>controller</strong></li>
  <li>The returned records are stored inside an instance variable called <code>@ideas</code> inside the controller</li>
  <li>Inside <code>index.html.erb</code></li>
  <ul>
    <li>We use the <code>@ideas</code> variable defined in the controller</li>
    <li><code>@idea</code> holds all of the <code>Idea</code> objects in the database</li>
    <li>We iterate through each idea in <code>@ideas</code></li>
    <li>For each idea, print out the <code>description</code> and <code>author</code></li>
  </ul>
</ul>


<p>
  Don't worry if this all doesn't make sense yet. With enough practice, all of this will become second-hand nature!
</p>

<%= standard_git_workflow %>
