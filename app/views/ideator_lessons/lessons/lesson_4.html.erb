<h1><%= title_for(IdeatorLesson, 2, 2) %></h1>

<p>
	Now let’s open up Sublime Text and open the folder called “Ideator” located in the desktop that contains our rails application.
</p>

<p>
	Let’s hop into our terminal (the terminal window that isn't running the rails server) and run the following command:
</p>

<pre><code class="bash">
rails generate controller ideas
</code></pre>

<p>
	This command generates a <code>controller</code> called <code>ideas</code> for you and will also generate a lot of files. Don’t worry too much about what this piece of code does yet. Things will start coming together as we progress, but for now we want you to start building an app first. This will keep you motivated from the start and help you overcome the first initial wall.
</p>

<p>
	Now let’s go into Sublime and open up <code>ideas_controller.rb</code> (remember the little trick? Command + P).
</p>

<p>
	Inside <code>ideas_controller.rb</code>, let’s add an <code>index</code> method like this. 
</p>

<pre><code class="ruby">
class IdeasController &lt; ApplicationController
  def index
  end
end
</code></pre>

<p>
	When we ran <code>rails generate controller ideas</code>, a folder called <code>ideas</code> was generated in the <code>app/views</code> folder.
</p>

<p>
	In Sublime, let’s right click on the <code>ideas</code> folder and create a new file. Let’s save that file as <code>index.html.erb</code>.
</p>

<p>
	Inside <code>index.html.erb</code>, let’s add this:
</p>

<pre><code class="erb">
&lt;h1&gt;This is my first app ever and I’m super excited to become a coder&lt;/h1&gt;
</code></pre>

<p>Awesome! Now let’s hop back into our browser and refresh <code>localhost:3000</code>.</p>

<p>...nothing has changed. It's still on the Ruby on Rails Welcome Page. Hmm.</p>

<p>
	It turns out that you have tell rails where your default homepage should be. It looks like we need to configure some things.
</p>


<p>
	Inside sublime let’s open up <code>routes.rb</code>. This file defines how the internals of the web application is hooked up when a user goes to a specific URL. For example, it defines which pages should show up when a user goes to a URL.
</p>

<%= create_flashcard %>

<p>
	Inside this file, let’s delete <code># root 'welcome#index'</code> and instead replace it with <code>root ‘ideas#index’</code>.
</p>

<p>
	Here, we are telling rails that when the user accesses the 'root' of the application (the homepage), it will trigger the <code>index</code> action (another word for method) in the <code>ideas_controller.rb</code>. 
</p>

<p>
	By default, when a method is triggered in the controller (in this case, the <code>index</code> method is triggered), then Rails will try to find an <code>html</code> file that has the same name as the method (in this case <code>index</code>) to display to the user in the <code>views</code> directory under the controller name's folder (Rails will also try to look into the inherited controller's folder, but let's not get into this right now).
</p>

<%= create_flashcard %>

<p>
	To clear things up, this is what happens:
</p>

<ul>
	<li>A user accesses the root page (the homepage)</li>
	<li>The <code>index</code> action in <code>ideas_controller.rb</code> is triggered</li>
	<li>Rails tries to find an <code>html</code> file that is named <code>index</code> in the <code>views/ideas</code> directory</li>
	<li>Rails finds the <code>idea.html.erb</code> file</li>
	<li>Rails displays the file</li>
</ul>

<p>
	Now let’s hop back into <code>localhost:3000</code> and let’s see what happens.
</p>

<p>
	Boom! You should now see “This is my first app ever and I’m super excited to become a coder”.
</p>

<p>
	Congrats on making it this far. You have written your first page on Ruby on Rails!
</p>

<div id = "HighFive" style = "width:80%;height:300px;display:none;">
	<i class="fa fa-hand-paper-o" style = "font-size:300px;display:block;">Woooooooo!!!</i>
</div>

<p>
	Let’s now commit this to GitHub. "Committing to Github" is another way of saying, "uploading our code up to Github".
</p>

<%= create_flashcard %>

<p>We’re first going to add all the files that we just updated:</p>

<pre><code class="bash">
git add .
</code></pre>

<p>Then we’re going to add a commit message describing what we just updated:</p>

<pre><code class="bash">
git commit -am “Add ideas controller and set ideas#index as root”
</code></pre>

<p>And finally, push up to GitHub.</p>

<pre><code class="bash">
git push origin master
</code></pre>

<p><strong>You’ll be doing this quite a lot and it will become second nature!</strong></p>





<script>
$( '#HideHighFive' ).click(function() {
	$( '#HideHighFive' ).hide();
	$( " #HighFive " ).show();
  $( " #HighFive " ).hide( "puff", {percent:500}, 2000 );
  $( '#HideHighFive' ).delay(2000).show(0);
});
</script>

