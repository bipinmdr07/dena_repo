

<p>
  Now that we've got a nice front end, let's work on the backend and actually get the app to do something.
</p>

<p>
  The first thing we are going to do is to create a <code>model</code>. In short, <strong>the role of models are to interact with the database</strong>. We'll go into the details of the role of models in future lessons, so let's not dive deep into the topics of models just yet. For now, let's focus on getting this app running.
</p>

<p>
  We can create models by running a command like this:
</p>

<pre><code class="bash">
rails generate model ModelName
</code></pre>

<p>
  In our case, let's name our model <code>Idea</code>. Let's go ahead and create the Idea model:
</p>

<pre><code class="bash">
rails generate model Idea
</code></pre>

<div class="well">
  <h3>Naming Conventions</h3>

  <p>
    In general, the convention for naming <strong>models</strong> is to use the <strong>singular form</strong>. For example, instead of <strong>Ideas</strong>, we want to name the model <strong>Idea</strong>.
  </p>

  <p>
    On the other hand, the convention for <strong>controllers</strong> is to use the plural form for controller names. For example, instead of naming the controller <strong>idea</strong>, we want to name it <strong>ideas</strong>.
  </p>

  <p>
    Not following this convention could lead to bugs, so whenever you create a model or controller, make sure to be careful of the singular or plural form.
  </p>

  <ul>
    <li>Models - Singular (for example, <code>Post</code>, <code>Article</code>)</li>
    <li>Controllers - Plural (for example, <code>Posts</code>, <code>Articles</code>)</li>
  </ul>

  <%= create_flashcard %>
</div>

<p>
  This will create a file named something like this: <code>xxxxxxxxx_create_ideas.rb</code>. The "xxxx"s will be replaced by a time stamp of when the file was created. These files are called <strong>migration files</strong>.
</p>

<div class="well">
  <h3>What are Migration Files?</h3>

  <p>
    When we want to store new information into the database, we need to create new tables and columns.
  </p>  

  <p>
    Think of a database like an excel spreadsheet. At first, an excel spreadsheet is empty.
  </p>

  <%= image_tag 'ideator/empty_excel.png', class: 'img-responsive screenshot' %>

  <p>
    Let's say we are organizing some kind of event, and we need to keep track of the information of the people that are coming to the event. In our excel spreadsheet, we would need to create a new table and new columns to do this:
  </p>

  <%= image_tag 'ideator/new_table.png', class: 'img-responsive screenshot' %>

  <p>
    Then, when people sign up for the event, we can keep track of the information easily:
  </p>

  <%= image_tag 'ideator/table_filled.png', class: 'img-responsive screenshot' %>

  <p>
    With databases, we need to follow the same steps as we would with spreadsheets.
  </p>

  <p>
    Initially, the database is empty. Whenever we want to keep track of new information in the database, we need to create new tables and columns. <strong>The way we create new tables and columns in the database in Rails is by running <em>database migrations</em>.</strong>
  </p>

  <p>
    The first step in migrating new tables and columns into the database is by telling Rails what tables and columns we should add to the database. We can do this by entering the information in the <strong>migration file</strong>.
  </p>

  <p>
    In short, <strong>the role of migration files is to specify what tables and columns we need to add or change in the database.</strong>
  </p>

  <%= create_flashcard %>

  <p>
    It's also important to note that in Rails, <strong>every time you generate a model, a migration file is generated</strong>. We will get into the details of how migrations work again in later lessons.
  </p>
</div>

<p>
  If you remember back to when we built the wireframes, we also drew out what our database columns were going to consist of. We figured out that <strong>for each of our ideas, we want to store the <code>description</code> and the <code>author</code> of the idea.
</p>

<p>
  In order to tell rails to create columns in the database for storing the <code>author</code> and <code>description</code> of the ideas, we have to tell it what kind of data they are going to be. <strong>Is the database column going to store numbers? Text? Booleans? We need to specify this when we create our migration files.</strong> Here we are going to tell rails that the <code>description</code> column is going to be the data type of <code>text</code>, and the <code>author</code> column is going to be the data type of <code>string</code></strong>. 
</p>

<p>
  Go into Sublime and hit <code>Command + P</code> and type in "create ideas" and it should find your migration file that looks like <code>xxxxxxxxx_create_ideas.rb</code>. Open the file that looks like <code>xxxxxxxxx_create_ideas.rb</code>. We can specify the database columns like we talked about above by making the migration file look like the following.
</p>

<pre><code class="ruby">
class CreateIdeas &lt; ActiveRecord::Migration
  def change
    create_table :ideas do |t|
      t.text :description
      t.string :author
      t.timestamps null: false
    end
  end
end
</code></pre>

<p>
  Make your file look <strong>exactly</strong> like above and save the file.
</p>

<p>
  Now that we have edited our migration file, we have to tell rails to migrate these columns. Type in the following command in the terminal and press enter:
</p>

<pre><code class="bash">
rake db:migrate
</code></pre>

<div class="well">
  <h3>What does rake db:migrate do?</h3>

  <p>
    We talked about how <strong>migration files specify what tables and columns need to be added or modified</strong>. What is this <code>rake db:migrate</code> command that we just ran here?
  </p>

  <p>
    First, let's think about what "migrate" means. <strong>In Rails, migrate means to update the database structure, for example adding a new table or adding a new column to the database.</strong>
  </p>

  <p>
    Running <code>rake db:migrate</code> will migrate, or update the database based on migration files.
  </p>

  <p>
    In short, <strong>Migration files tell what database tables and columns to add or modify, and <code>rake db:migrate</code> takes that information and updates the database.</strong>
  </p>  

  <%= create_flashcard %>
</div>

<div class="well">

  <h3>Getting Errors?</h3>

  <p>
    Chances are you have a typo in the migration file. Double check your file to make sure you don't have any typos before you run your migrations. Make sure the file looks <strong>exactly</strong> like the code above.
  </p>

</div>

<p>
  As a rule of thumb, <strong>every time you run a migration, you should restart your server.</strong> So let's go ahead and restart our server (<code>Control + C</code> to stop the server and <code>rails s</code> to start the server again).
</p>

<p>
  If done correctly, if you go into <code>schema.rb</code>, you should now see the columns added to the ideas table.
</p>

<div class="well">
  <h3>What is schema.rb?</h3>

  <p>
    Every Rails application includes a file called <code>schema.rb</code>. <code>schema.rb</code> is the file that lays out all of the database tables and columns in the application.
  </p>

  <p>
    For example, if we look at our <code>schema.rb</code> file now, it should look something like this:
  </p>

  <pre><code class="ruby">
ActiveRecord::Schema.define(version: 20160113000616) do

  # These are extensions that must be enabled in order to support this database
  enable_extension "plpgsql"

  create_table "ideas", force: :cascade do |t|
    t.text     "description"
    t.string   "author"
    t.datetime "created_at",  null: false
    t.datetime "updated_at",  null: false
  end

end
  </code></pre>

  <p>
    Let's focus on this part of the code:
  </p>

  <pre><code class="ruby">
create_table "ideas", force: :cascade do |t|
  t.text     "description"
  t.string   "author"
  t.datetime "created_at",  null: false
  t.datetime "updated_at",  null: false
end
  </code></pre>

  <p>
    Here, it is saying that we have an <code>ideas</code> table, and inside that table, we have a<code>description</code> column which is a <code>text</code> column, an <code>author</code> column which is a <code>string</code>, a <code>created_at</code> column which is a <code>datetime</code>, and an <code>updated_at</code> column which is a <code>datetime</code>.
  </p>

  <p>
    <code>schema.rb</code> is updated automatically every time you run a migration to reflect the new changes to the database.
  </p>

  <p>
    In short, <code>schema.rb</code> <strong>specifies what database tables and columns are included in the application.</strong>
  </p>

  <%= create_flashcard %>
</div>

<p>
  Awesome! You've set up your first model! :) The fun will soon begin!
</p>

<%= standard_git_workflow %>
