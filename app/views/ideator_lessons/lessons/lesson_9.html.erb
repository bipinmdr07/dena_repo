<h1><%= title_for(IdeatorLesson, 4, 1) %></h1>

<p>
  Now that we've got a nice front end, let's work on the backend and actually get the app to do something.
</p>

<p>
  The first thing we are going to do is to create a <code>model</code>. In short, <strong>the role of models are to interact with the database</strong>. We'll go into the details of the role of models in future lessons. For now, let's focus on getting this app running.
</p>

<p>
  We can create models by running a command like this:
</p>

<pre><code class="bash">
rails generate model ModelName
</code></pre>

<p>
  In our case, let's name our model <code>Idea</code>. Let's go ahead and create the Idea model:
</p>

<pre><code class="bash">
rails generate model Idea
</code></pre>

<div class="well">
  <h3>Naming Conventions</h3>

  <p>
    In general, the convention for naming <strong>models</strong> is to use the singular form. For example, instead of <strong>Ideas</strong>, we want to name the model <strong>Idea</strong>.
  </p>

  <p>
    On the other hand, the convention for <strong>controllers</strong> is to use the plural form for controller names. For example, instead of naming the controller <code>idea</code>, we want to name it <code>ideas</code>.
  </p>

</div>

<p>
  This will create a file named something like this: <code>xxxxxxxxx_create_ideas.rb</code>. The "xxxx"s will be replaced by a time stamp of when the file was created. These files are called <strong>migration files</strong> because this file tells Rails what to "migrate" into our database.
</p>

<p>
  Let's hop into sublime and open this file up. This file has the job of telling rails what columns to add to our Idea model.
</p>

<p>
  If you remember back to when we built the wireframes, we also drew out what our database columns were going to consist of. We figured out that <strong>for each of our Ideas, we want to store the <code>description</code> and the <code>author</code> of the idea.
</p>

<p>
  In order to tell rails to create columns in the database for storing the <code>author</code> and <code>description</code> of the ideas, we have to tell it what kind of data they are going to be. <strong>Is the database column going to store numbers? Text? Booleans? We need to specify this when we create our migration files.</strong> Here we are going to tell rails that the <code>description</code> column should be the <code>text</code> datatype, and the <code>author</code> column is going to be a <code>string</code></strong>. We can add this by making the migration file look like the following. Go into Sublime and hit <code>Command + P</code> and type in "create ideas" and it should find your migration file that looks like <code>xxxxxxxxx_create_ideas.rb</code>. Open the file that looks like <code>xxxxxxxxx_create_ideas.rb</code> and make it look exactly like below.
</p>

<pre><code class="ruby">
class CreateIdeas &lt; ActiveRecord::Migration
  def change
    create_table :ideas do |t|
      t.text :ideas
      t.string :author
      t.timestamps null: false
    end
  end
end
</code></pre>

<p>
  Make your file look <strong>exactly</strong> like above and save the file.
</p>

<p>
  Now that we have edited our migration file, we have to tell rails to migrate these columns. Run the following command:
</p>

<pre><code class="bash">
rake db:migrate
</code></pre>

<div class="well">

  <h3>Getting Errors?</h3>

  <p>
    Chances are you have a typo in the migration file. Double check your file to make sure you don't have any typos before you run your migrations. Make sure the file looks <strong>exactly</strong> like the code above.
  </p>

</div>

<p>
  As a rule of thumb, every time you run a migration, you should restart your server. So let's go ahead and restart our server (<code>Command + C</code> to stop the server and <code>rails s</code> to start the server again).
</p>

<p>
  If done correctly, if you go into <code>schema.rb</code>, you should now see the columns added to the ideas table. The <code>schema</code> file basically lays out the tables and columns you have in your rails application.
</p>

<p>
  Awesome! You've set up your first model! :) The fun will soon begin!
</p>

<p>
  Let's go through the standard git workflow.
</p>

