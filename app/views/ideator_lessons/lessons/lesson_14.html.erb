

<p>
  Now that we're able to create our ideas smoothly, let's work on writing code so that users can <code>edit</code> and <code>update</code> the ideas.
</p>

<p>
  First, let's go into <code>ideas_controller.rb</code>. Inside the file, let's add an <code>edit</code> method. In <code>ideas_controller.rb</code>, add the following code <strong>right under your <code>create</code> method</strong>.
</p>

<p class="alert alert-info">
  Make sure you don't put it under <code>private</code>. Code written under <code>private</code> will make the code private, meaning that they won't be accessible outside of the class.
</p>

<pre><code class="ruby">
# end of create method

def edit
end
</code></pre>

<div class="well">
  <h3>Review on Controller and Views Files</h3>

  <p>
    By default, once a controller action is triggered, Rails will try to find a file with the name of the controller action in <code>app/views/controller_name</code>.
  </p>

  <p>
    For example, when the <code>edit</code> method in <code>ideas_controller.rb</code> is triggered, Rails will try to find a file called <code>edit.html.erb</code> inside <code>app/views/ideas</code>. Review <%= link_to 'this lesson', '/ideator_lessons/12#controller_action' %> for more information.
  </p>

  <%= create_flashcard %>
</div>

<p>
  Let's create a file called <code>edit.html.erb</code> in the <code>/app/views/ideas</code> folder.
</p>

<p>
  This <code>edit.html.erb</code> is where we want to put our form for editing ideas. Since we want to be able to tell rails which idea we are editing, let's tell rails to <code>find</code> the idea that we are working on and store that in an instance variable. Let's go back to the <code>ideas_controller.rb</code> and add a line of code to the <code>edit</code> method.
</p>

<pre><code class="ruby">
def edit
  @idea = Idea.find(params[:id])
end
</code></pre>

<div class="well">
  <h3>find</h3>

  <p>
    What is this <code>Idea.find(params[:id])?</code>? This is a new concept, but let's try to break it down into little pieces.
  </p>

  <p>
    First, let's open up our rails console. In the terminal, type in the following command and press enter:
  </p>

<pre><code class="bash">
rails console 
</code></pre>

  <p>
    Once it's open, let's type in the following command to display all of our ideas that are stored in the database.
  </p>

<pre><code class="bash">
Idea.all
</code></pre>

  <p>
    All of your ideas should be displayed in the terminal now. <strong>Notice how each idea has it's own </strong><code>id</code>. 
  </p>

  <p>
    <strong>When you create an object in Rails, it will give the object a unique <code>id</code> automatically.</strong> These <code>id</code>s can be used to retrieve objects.
  </p>

  <p>
    For example, let's say we want to get an <code>Idea</code> with an <code>id</code> of <code>1</code>. We can do this with the following command. In the rails console, type in the following command and press enter:
  </p>

<pre><code class="ruby">
Idea.find(1)
</code></pre>

  <p>
    The code above means: <strong><em>Find an Idea with an id of 1</em></strong>. 
  </p>

  <p>
    The <code>find</code> method can be used to retrieve an object that has the <code>id</code> passed in as a parameter:
  </p>

<pre><code class="ruby">
Idea.find(1)
</code></pre>


  <p>
    The code above means: <strong><em>Find an Idea with an id of 1</em></strong>. 
  </p>

  <p>
    The <code>find</code> method can be used to retrieve an object that has the <code>id</code> passed in as a parameter:
  </p>

<pre><code class="ruby">
Modelname.find(id)
</code></pre>

  <%= create_flashcard %>

  <p>
    Let's go back to this piece of code:
  </p>

<pre><code class="ruby">
def edit
  @idea = Idea.find(params[:id])
end
</code></pre>

  <p>
    Here we see code that we've never seen before: <code>params[:id]</code>. Let's break down what params are.
  </p>    

  <h3>params</h3>

  <p>
    You will see <code>params</code> used in mainly 3 situations.
  </p>  

  <ul>
    <li>GET requests</li>
    <li>POST requests</li>
    <li>Routing parameters</li>
  </ul>

  <p>
    Let's go through each one.
  </p>

  <h2>GET Requests</h2>

  <p>
    When a user makes a request to a server such as a <code>GET</code> request (refresher on HTTP methods in <%= link_to 'this lesson', '/ideator_lessons/12' %>), information gets sent to the browser.
  </p>

  <p>
    Many times, the params are encoded in the URL, like this:
  </p>

<pre><code class="bash">
http://www.example.com/?foo=1&boo=octopus
</code></pre>

  <p>
    In this example, we have two pieces of data, <code>foo</code> and <code>boo</code>. <code>foo</code> is assigned a variable of <code>1</code> and <code>boo</code> is assigned a variable of <code>octopus</code>.
  </p>

  <p>
    In Rails, we can get the values for each piece of data like this:
  </p>

<pre><code class="ruby">
params[:foo] # returns 1
params[:boo] # returns octopus
</code></pre>

  <h2>POST requests</h2>
  
  <p>
    When making a <code>POST</code> request (for example, when you write a Facebook post and hit the submit button), the information will not be encoded in the URL like it did with the <code>GET</code> request example above. For example, in our application, we have the following form:
  </p>

<pre><code class="erb">
<!-- Button trigger modal -->
&lt;button type="button" class="btn btn-primary btn-lg" data-toggle="modal" data-target="#myModal"&gt;
  Add Idea
&lt;/button&gt;

<!-- Modal -->
&lt;div class="modal fade" id="myModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel"&gt;
  &lt;div class="modal-dialog" role="document"&gt;
    &lt;div class="modal-content"&gt;
      &lt;div class="modal-header"&gt;
        &lt;button type="button" class="close" data-dismiss="modal" aria-label="Close">&lt;span aria-hidden="true"&gt;&times;&lt;/span&gt;&lt;/button&gt;
        &lt;h4 class="modal-title" id="myModalLabel">Modal title&lt;/h4&gt;
      &lt;/div&gt;
      &lt;%= simple_form_for Idea.new do |f| %&gt;
        &lt;div class="modal-body"&gt;
          &lt;%= f.input :description %&gt;
          &lt;%= f.input :author %&gt;
        &lt;/div&gt;      
        &lt;div class="modal-footer"&gt;
          &lt;button type="button" class="btn btn-default" data-dismiss="modal">Close&lt;/button&gt;
          &lt;%= f.submit 'Submit', class: 'btn btn-primary' %&gt;
        &lt;/div&gt;
      &lt;% end %&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
</code></pre>

  <p>
    Let's say you fill out the form like this:
  </p>

  <%= image_tag 'ideator/ideator_form.png', class: 'screenshot img-responsive' %>


  <p>
    When a user clicks "Submit", a bunch of data is sent to the server. In your terminal window that is running the rails server, you will see something like this:
  </p>

  <%= image_tag 'ideator/post_params.png', class: 'screenshot img-responsive' %>

  <p>
    Notice how the information we filled out in the form is shown here:
  </p>

<pre><code class="bash">
"idea"=>{"description"=>"TECHRISE is a great idea :)", "author"=>"Takehiro Mouri"}
</code></pre>

  <p>
    <strong>These are parameters being sent to the server.</strong> We can access these attributes like this:
  </p>

<pre><code class="ruby">
params[:idea][:description] # returns "TECHRISE is a great idea :)"
params[:idea][:author] # returns "Takehiro Mouri"
</code></pre>

  <h2>Routing Parameters</h2>
  <p>
    If we go to our terminal and type <code>rake routes</code>, you will see a list of routes (review <%= link_to 'this lesson', '/ideator_lessons/12' %> for more on routes). If you look at the <code>URI pattern</code> column, you will see that some have <code>/:id(.:format)</code> at the end of its URI. This <code>:id</code> is important. Rails sends this <code>:id</code> to the server as a parameter.
  </p>

  <p>
    Let's look at an example of the edit action. When we ran rake routes, we see a line like this:
  </p>

<pre><code class="bash">
     Prefix Verb   URI Pattern               Controller#Action
edit_idea GET    /ideas/:id/edit(.:format) ideas#edit
</code></pre>

  <p> 
    Let's take a look at the URI Pattern. Notice the <code>:id</code> portion of <code>/ideas/:id/edit(.:format)</code>. This <code>:id</code> represents an <code>id</code> that is passed in as a parameter in the URL.
  </p> 

  <p>
    For example, when a user makes a <code>GET</code> request to a URL like <code>https://www.techrise-ideator.herokuapp.com/ideas/1/edit</code>, the <code>edit</code> action of the <code>ideas</code> controller is triggered. <code>id</code> is sent to the server as a parameter as well.
  </p>

  <%= create_flashcard %>

  <h3>Overview</h3>

  <p>
    Let's take a look at the following code again:
  </p>  

<pre><code class="ruby">
def edit
  @idea = Idea.find(params[:id])
end
</code></pre>

  <p>
    Now we know what this means. We are telling Rails to <code>find</code> the <code>Idea</code> with the <code>id</code> of <code>params[:id]</code>, which is a value that is passed in as a parameter, and store it in <code>@idea</code>.
  </p>

  <%= create_flashcard %>

</div>

<p>
  Now let's hop into <code>edit.html.erb</code>. Here we can actually use similar code that we have used before for creating new ideas. Make the file look like this:
</p>

<pre><code class="erb">
&lt;h1>Revise Idea&lt;/h1&gt;

&lt;%= simple_form_for @idea, method: :patch do |f| %&gt;
&lt;%= f.input :description %&gt;
  &lt;%= f.input :author %&gt;
  &lt;%= f.submit 'Submit', class: 'btn btn-primary' %&gt;
&lt;% end %&gt;
</code></pre>



<p>
  The only difference here is that on the first line of the simple form we are adding <code>method: :patch</code>. This piece of code indicates that we are performing a <code>PATCH</code> request. If we type <code>rake routes</code> in the terminal and look at the <code>VERB</code> column, we can see that it corresponds to a controller action. For <code>PATCH</code>, it corresponds to <code>ideas#update</code>. This means that when we submit this form, it will trigger the <code>update</code> method in the <code>ideas</code> controller.
</p>

<p>
  Right now we don't have an <code>update</code> method, so let's add that in our <code>ideas_controller.rb</code>.
</p>

<p>
  Under our <code>edit</code> method, add the following code:
</p>

<pre><code class="ruby">
def update
  @idea = Idea.find(params[:id])
  if @idea.update(idea_params)
    redirect_to root_path
  else
    redirect_to edit_idea_path(params[:id])
  end
end
</code></pre>

<p>
  Let's go through what this code is doing. We're first doing the same thing we did in the <code>edit</code> method: finding the idea we are working on using <code>params[:id]</code>, and then storing that in <code>@idea</code>. 
</p>

<p>
  Then we are saying if <code>@idea</code> updates successfully, then <code>redirect_to</code> the <code>root_path</code> (the home page). If it doesn't update successfully, then <code>redirect_to</code> the <code>edit</code> page that we were just on so that you can enter the correct information.
</p>

<p>
  Why do we need to check if the idea was updated successfully? In the next lesson, we'll talk about <strong>validations</strong> and get into why we need to do this.
</p>

<%= standard_git_workflow %>



