

<p>
  Up until now we've added our ideas through the <code>rails console</code>, but that's a little bit inconvenient. Instead, let's create a form to add more ideas.
</p>

<h3>Setting Up Routes</h3>
<p>
  The first thing we need to do is set up our <code>routes</code>. What we write in <code>routes.rb</code> defines how the web application is hooked up, or routed. 
</p>

<p>
  If we go to the terminal and type in <code>rake routes</code>, we can see all of our routes that are set up. Right now, all you should see is this:
</p>

<pre><code>
Prefix Verb URI Pattern Controller#Action
  root GET  /           ideas#index
</code></pre>

<div class="well">
  <h3>rake routes</h3>

  <p>
    <code>rake routes</code> is a command that you will be using a lot. The <code>rake routes</code> command displays how the application is mapped out. For example, let's take a look at the following:
  </p>

<pre><code>
Prefix Verb URI Pattern Controller#Action
  root GET  /           ideas#index
</code></pre>

  <p>
    This is the routing for the home directory. As we talked about before, when a user accesses the home page, the <code>index</code> method of <code>ideas_controller.rb</code> is triggered.
  </p>
  
  <p>
    We see four different terms above:
  </p>

  <ul>
    <li>Prefix</li>
    <li>Verb</li>
    <li>URI Pattern</li>
    <li>Controller#Action</li>
  </ul>

  <p>
    Let's go through what each of these terms mean.
  </p>


<h3>link_to</h3>


  <p>
    With HTML, you can create links like this:
  </p>

<pre><code class="html">
&lt;a href="http://www.google.com"&gt;Google&lt;/a&gt;
</code></pre> 

  <p>
    In <code>erb</code> files, we can create links with <code>link_to</code>. For example, we can make the same exact link as above like this:
  </p>

<pre><code class="erb">
&lt;%= link_to 'Google', 'http://www.google.com' %&gt;
</code></pre>

  <p>
    These two pieces of code will produce the same exact link.
  </p>

  <h3>Prefix</h3>

  <p>
    In ruby on rails, you can use the <code>Prefix</code> to create links with <code>link_to</code>. We see above that we have a prefix called <code>root</code>. For example, if we want to create a link to the home directory, we can write code like this:
  </p>

<pre><code class="erb">
&lt;%= link_to 'Home Page', root_path %&gt;
</code></pre>

  <p>
    This will produce HTML code that looks like this:
  </p>

<pre><code class="html">
&lt;a href="/"&gt;Home Page&lt;/a&gt;
</code></pre> 

  <p>
    By attaching <code>_path</code> to the prefix inside the <code>link_to</code> block, you can create a link easily.
  </p>

  <p>
    As a side note, appending <code>_path</code> to the <code>Prefix</code> will generate the <em>relative path</em> - for example <code>/</code>.
  </p>

  <p>
    On the other hand, you can also generate an <em>absolute path</em> by appending <code>_url</code> to the <code>Prefix</code>. For example, <code>root_url</code> will result in the full URL: <code>https://techrise-ideator.herokuapp.com/</code>
  </p>

  <h3>URI Pattern</h3>

  <p>
    Notice how <code>root_path</code> resulted in creating a link with the <code>href</code> of <code>"/"</code>.
  </p>

  <p>
    If we look back to the result of running <code>rake routes</code>, we can see that the <code>URI Pattern</code> is <code>/</code>. When a user accesses a URL that matches the <code>URI Pattern</code>, the <code>Controller#Action</code> is triggered.
  </p>

  <h3 id="controller_action">Controller#Action</h3>

  <p>
    The <code>Action</code> (another word for method) of the <code>Controller</code> is triggered when a user makes a request to a URL that matches the <code>URI Pattern</code>.
  </p>

  <p>
    For example, when a user goes to <code>http://localhost:3000/</code>, the URL matches the <code>/</code> URI Pattern. At this point, the <code>index</code> action of the <code>Ideas</code> Controller is triggered.
  </p>

  <p>
    <strong>When a controller action is triggered, Rails will try to find an <code>html.erb</code> file with the name of the controller action inside the <code>apps/views/controller_name</code> directory.</strong>
  </p>

  <p>
    For example, when the <code>index</code> action of the <code>Ideas</code> Controller is triggered, Rails will try to find a filed called <code>index.html.erb</code> inside the <code>apps/views/ideas</code> directory.
  </p>

  <%= create_flashcard %>

  <h3>Verb</h3>

  <p>
    We won't go too deep in to this topic right now, we will go over this topic in later lessons.
  </p>

  <p>
    There are five different HTTP methods:
  </p>

  <ul>
    <li>GET</li>
    <li>POST</li>
    <li>DESTROY</li>
    <li>PUT</li>
    <li>PATCH</li>
  </ul>

  <p>
    Here's what each of the methods do in short (there is a whole chapter on this later on in the course):
  </p>

<ul>
  <li><strong><code>GET</code> requests are used to retrieve data. When you vist a web page, you are making a <code>GET</code> request.</strong></li>
  <ul>
    <li>When you type in <code>https://www.facebook.com</code> in your browser and press enter, you are making a <code>GET</code> request to Facebook's servers.</li>
  </ul>
  <li><strong><code>POST</code> requests are used to create new objects.</strong></li>
  <ul>
    <li>When you create a Facebook post, you are making a <code>POST</code> request to Facebook's servers</li>
  </ul>
  <li><strong><code>DELETE</code> requests are used to delete objects.</strong></li>
  <ul>
    <li>When you delete a Facebook post, you are making a <code>DELETE</code> request to Facebook's servers</li>
  </ul>
  <li><strong><code>PATCH</code> requests are used to update objects.</strong></li>
  <ul>
    <li>When you update a Facebook post, you are making a <code>PATCH</code> request to Facebook's servers</li>
  </ul>
  <li><strong><code>PUT</code> requests are not used anymore, use <code>PATCH</code> requests instead.</strong></li>
</ul>

  <p>
    When a user types in a URL in the browser and presses enter, the user is making a <code>GET</code> request - the user is trying to retrieve data from the server.
  </p>

  <p>
    For example, when a user accesses <code>https://www.facebook.com</code>, the user is making a <code>GET</code> request to the Facebook servers.
  </p>

</div>

<p>
  What we want to do is set up routes for creating new ideas, deleting new ideas, editing new ideas, etc. Rails provides a super convenient way to do this. Here's what we need to do.
</p>

<p>
  Let's go in to <code>routes.rb</code> and under <code>root 'ideas#index'</code>, let's put <code>resources :ideas</code> and make your file look like the following:
</p>

<pre><code class="ruby">
Rails.application.routes.draw do

  root 'ideas#index'

  resources :ideas

end
</code></pre>

<p>
  Save the file and run <code>rake routes</code> in the terminal. Just like that, the output should now be this:
</p>

<pre><code>
   Prefix Verb   URI Pattern               Controller#Action
     root GET    /                         ideas#index
    ideas GET    /ideas(.:format)          ideas#index
          POST   /ideas(.:format)          ideas#create
 new_idea GET    /ideas/new(.:format)      ideas#new
edit_idea GET    /ideas/:id/edit(.:format) ideas#edit
     idea GET    /ideas/:id(.:format)      ideas#show
          PATCH  /ideas/:id(.:format)      ideas#update
          PUT    /ideas/:id(.:format)      ideas#update
          DELETE /ideas/:id(.:format)      ideas#destroy
</code></pre>

<p>
  By putting in <code>resources :ideas</code>, rails generated all of these routes for us!
</p> 

<div class="well">
  <h3>resources</h3>

  <p>
    Web applications are made up of mainly the following components:
  </p>

  <ul>
    <li><strong>The Index Page</strong> - the page displays all of the records</li>
    <ul>
      <li>When you go on to Facebook, it displays all of your friend's posts. This is the index page.</li>
      <li>This is a <code>GET</code> request</li>
    </ul>
    <li><strong>The Show Page</strong> - the page that displays one individual record</li>
    <ul>  
      <li>In the index page, all of your friend's posts are displayed. When you click on a post, you can view the individual post alone. This is the show page.</li>
      <li>This is a <code>GET</code> request</li>
    </ul>
    <li><strong>The New Page</strong> - the page where you typically fill out a form to create a new record</li>
    <ul>
      <li>In Facebook, there is no New page since you can create a Facebook post from the front page. If there was a page only for creating a Facebook post, that would be the new page.</li>
      <li>This is a <code>GET</code> request - we aren't actually posting to the server, this page typically just displays a form</li>
    </ul>
    <li><strong>The Create Action</strong> - the backend process that creates and saves a new record to the database</li>
    <ul>
      <li>When you create a Facebook post, the create action is triggered. The create action takes care of creating the new post and saving it to the Facebook servers.</li>
      <li>This is a <code>POST</code> request</li>
    </ul>
    <li><strong>The Edit Page</strong> - the page where there is typically a form where you can edit the record</li>
    <ul>
      <li>In Facebook, there is no page for just editting a Facebook post. If there was, that would be the edit page.</li>
      <li>This is a <code>GET</code> request</li>
    </ul>
    <li><strong>The Update Action</strong> - the backend process that updates a record into the database</li>
    <ul>
      <li>When you edit a Facebook post and press submit, the update action is triggered.</li>
      <li>This is a <code>PATCH</code> request</li>
      <li>It is also mapped to <code>PUT</code>, but it is not used vey often</li>
    </ul>
    <li><strong>The Destroy action</strong> - the backend process that deletes a record from the database</li>
    <ul>
      <li>When you delete a naughty Facebook post, the destroy action is triggered and deletes the post from Facebook's server.</li>
      <li>This is a <code>DELETE</code> request</li>
    </ul>
  </ul>

  <p>
    Since these components are so common, Ruby on Rails made it super easy to create the routes for these actions.
  </p>

  <p>
    When you add <code>resources :controller_name</code> to <code>routes.rb</code>, it automatically creates routes for the following actions that we talked about above:
  </p>

  <ul>
    <li>index</li>
    <li>show</li>
    <li>new</li>
    <li>create</li>
    <li>edit</li>
    <li>update</li>
    <li>destroy</li>
  </ul>

  <p>
    We can use these actions to create various features in our web application.
  </p>
</div>

<h3>Adding a Form</h3>

<p>
  In order to add ideas through a form, we need to tell rails what to do when the form is submitted and tries to create an idea. What we need is a <code>create</code> method which will be responsible for creating our ideas and saving them to our database.
</p>

<p>
  In our <code>ideas_controller</code>, let's make a <code>create</code> method.
</p>

<pre><code class = "ruby">
class IdeasController &lt; ApplicationController
  def index
    @ideas = Idea.all
  end

  def create
  end
end
</code></pre>

<p>
  Inside this <code>create</code> method, we're going to call the <code>create</code> method on <code>Idea</code>.
</p>

<p class="alert alert-info">
  Refer back to <%= link_to 'this lesson', '/ideator_lessons/10' %> for a review of this topic.
</p>

<p>
  We can pass in a parameter for <code>.create</code> by adding <code>()</code>s like <code>.create()</code> and then passing in information between them. In rails, it is best practice to also use <strong>strong parameters</strong>, which you don't need to worry about learning too deeply right now. <strong>In short, strong params are basically a security measure to make sure bad people don't input bad things to do bad things.</strong> If you want to find out more, you can read more <a href="http://edgeguides.rubyonrails.org/action_controller_overview.html#strong-parameters" target ="_blank">here</a>.
</p>

<p>
  We can implement strong params by creating a <code>private</code> method called <code>idea_params</code> and then saying, <code>require</code> an <code>idea</code> and only <code>permit</code> the <code>description</code> and <code>author</code> for the ideas. By doing this, if a user tries to be clever and attempts to pass in a <code>:color</code> or some random parameter like that, rails will not accept it. The code for doing this looks like below:
</p>

<pre><code class="ruby">
params.require(:idea).permit(:description, :author)
</code></pre>

<p>
  Again, we are saying here that we are only permitting <code>description</code>s and <code>author</code>s for each idea. Let's add put the above code in a method called <code>idea_params</code> like below:
</p>

<pre><code class = "ruby">
class IdeasController &lt; ApplicationController
  def index
    @ideas = Idea.all
  end

  def create
    @idea = Idea.create(idea_params)
  end

  private

  def idea_params
    params.require(:idea).permit(:description, :author)
  end
end
</code></pre>

<p>
  Awesome! Now that we've got the params set up, we need to tell rails what to do after we create the idea. What we need to do is redirect the user to a page (or else rails will give us an error). So after creating the idea, let's tell rails to redirect to the home page. We can do this by adding <code>redirect_to root_path</code>.
</p>

<pre><code class = "ruby">
class IdeasController &lt; ApplicationController
  def index
    @ideas = Idea.all
  end

  def create
    @idea = Idea.create(idea_params)
    redirect_to root_path
  end

  private

  def idea_params
    params.require(:idea).permit(:description, :author)
  end
end
</code></pre>

<p>
  So basically what we just did is this: we told rails that when we trigger the <code>create</code> method, we are going to create an idea using some information passed in as <strong>parameters</strong>, and then once that's done, we're going to redirect our browser to the home page.
</p>

<p>
  Cool, let's get going. Now that we've got a <code>create</code> method, we can now go ahead and create a form for this.
</p>

<p>
  We're going to use a <code>gem</code> called <code>simple_form</code> that makes making forms super easy for us.
</p>

<p>
  First, go to the documentation <a href="https://github.com/plataformatec/simple_form" target="_blank">here</a>. Let's go ahead and follow the instructions.
</p>

<p>
  The first thing it tells us to do is to add the gem to your <code>Gemfile</code>. So in your <code>Gemfile</code>, add this line:
</p>

<pre><code class="ruby">
gem 'simple_form'
</code></pre>

<p>
  Then run the following command in the terminal to install it:
</p>

<pre><code class="bash">
bundle install
</code></pre>

<p>
  If we look at the documentation, we see that there are several options on how to run the simple form generator. In our case, we are going to run the generator that integrates simple form with bootstrap. So let's run this command.
</p>

<pre><code class="bash">
rails generate simple_form:install --bootstrap
</code></pre>

<p>
  Awesome. Remember, every time we run <code>bundle install</code>, we should restart the server. Let's go ahead and do that.
</p>

<p>
  Now that we've got simple form installed, let's go ahead and try to use it. At the top of <code>index.html.erb</code>, let's add this piece of code:
</p>

<pre><code class="ruby">
&lt;%= simple_form_for Idea.new do |f| %&gt;
  &lt;%= f.input :description %&gt;
  &lt;%= f.input :author %&gt;
  &lt;%= f.submit 'Submit' %&gt;
&lt;% end %&gt;
</code></pre>

<p>
  Let's go back into our browser and look at how it looks now. You should have a form just like that!
</p>

<p>
  However, the buttons look really ugly, so let's add some bootstrap buttons on there to make them look nicer. What we can do is add a <code>btn btn-primary</code> class to the Submit button. We can do this by adding <code>class: 'btn btn-primary'</code> to the Submit button code like below (make sure to put the <code>,</code> between <code>'Submit'</code> and <code>class:</code>)
</p>

<pre><code class="ruby">
&lt;%= simple_form_for Idea.new do |f| %&gt;
  &lt;%= f.input :description %&gt;
  &lt;%= f.input :author %&gt;
  &lt;%= f.submit 'Submit', class: 'btn btn-primary' %&gt;
&lt;% end %&gt;
</code></pre>

<p>
  Save the file and refresh the browser. We now see prettier buttons! Awesome!
</p>

<p>
   Now let's test this out. Enter an idea and an author and press 'Submit'. Voila! You should see your idea on your page, just like that!
</p>

<%= standard_git_workflow %>

