<h1><%= title_for(IdeatorLesson, 4, 4) %></h1>

<p>
  Up until now we've added our ideas through the <code>rails console</code>, but that's a little bit inconvenient. Instead, why don't we create a form to add more ideas.
</p>

<h3>Setting Up Routes</h3>
<p>
  The first thing we need to do is set up our <code>routes</code>. What we write in <code>routes.rb</code> dictates how all of our pages are linked up.
</p>

<p>
  If we go to the terminal and type in <code>rake routes</code>, we can see all of our routes that are set up. Right now, all you should see is this:
</p>

<pre><code>
Prefix Verb URI Pattern Controller#Action
  root GET  /           ideas#index
</code></pre>

<p>
  What we want to do is set up routes for creating new ideas, deleting new ideas, editing new ideas, etc. Rails provides a super convenient way to do this. Here's what we need to do.
</p>

<p>
  Let's go in to <code>routes.rb</code> and under <code>root 'ideas#index'</code>, let's put <code>resources :ideas</code> and make your file look like the following:
</p>

<pre><code class="ruby">
Rails.application.routes.draw do

  root 'ideas#index'

  resources :ideas

end
</code></pre>

<p>
  Save the file and run <code>rake routes</code> in the terminal. Just like that, the output should now be this:
</p>

<pre><code>
   Prefix Verb   URI Pattern               Controller#Action
     root GET    /                         ideas#index
    ideas GET    /ideas(.:format)          ideas#index
          POST   /ideas(.:format)          ideas#create
 new_idea GET    /ideas/new(.:format)      ideas#new
edit_idea GET    /ideas/:id/edit(.:format) ideas#edit
     idea GET    /ideas/:id(.:format)      ideas#show
          PATCH  /ideas/:id(.:format)      ideas#update
          PUT    /ideas/:id(.:format)      ideas#update
          DELETE /ideas/:id(.:format)      ideas#destroy
</code></pre>

<p>
  By putting in <code>resources :ideas</code>, rails generated all of these routes for us! Amazing! If we look at the <code>Controller#Action</code> on the right, we can see that it created routes for a lot of actions such as <code>create</code>, <code>edit</code>, <code>update</code>, and <code>destroy</code>. We'll get into what all of these actions mean in later lessons, but just remember now that <code>resources :ideas</code> automatically generated all of these routes for us.
</p>

<p>
  Now that we've got our routes set up, let's move on.
</p>

<h3>Adding a Form</h3>

<p>
  In order to add ideas through a form, we need to tell rails what to do when the form is submitted and tries to create an idea. What we need is a <code>create</code> method which will be responsible for creating our ideas and saving them to our database.
</p>

<p>
  In our <code>ideas_controller</code>, let's make a <code>create</code> method.
</p>

<pre><code class = "ruby">
class IdeasController &lt; ApplicationController
  def index
    @ideas = Idea.all
  end

  def create
  end
end
</code></pre>

<p>
  Inside this <code>create</code> method, we're going to <code>.create</code> an <code>Idea</code>.
</p>

<p>
  When we <code>create</code> our <code>Idea</code>, we're also going to give it some information to work with. We call these <strong>parameters</strong>. In this case, <strong>when we tell rails to create our idea, we also need to give rails some information about what the idea is all about.</strong> Without giving rails that information, or in other words, those <strong><i>parameters</i></strong>, rails is just going to say, <i>"Okay, you want me to make an idea, but you're not giving me any information on what kind of idea you want me to make."</i> By giving rails those parameters, rails can say <strong><i>"Cool! You want me to make an idea using this information that you've provided me."</i></strong> You'll be able to pass in parameters to the <code>create</code> method through forms.
</p>

<p>
  We can pass in a parameter for <code>.create</code> by adding <code>()</code>s like <code>.create()</code> and then passing in information between them. In rails, it is best practice to also use <strong>strong parameters</strong>, which you don't need to worry about digesting right now. <strong>In short, strong params are basically a security meausure to make sure bad people don't input bad things to do bad things.</strong> If you want to find out more, you can read more <a href="http://edgeguides.rubyonrails.org/action_controller_overview.html#strong-parameters" target ="_blank">here</a>.
</p>

<p>
  We can implement strong params by creating a <code>private</code> method called <code>idea_params</code> and then saying, <code>require</code> an <code>idea</code> and only <code>permit</code> the <code>description</code> and <code>author</code> for the ideas. By doing this, if a user tries to be clever and attempts to pass in a <code>:color</code> or some random parameter like that, rails will not accept it. The code for doing this looks like below:
</p>

<pre><code class="ruby">
params.require(:idea).permit(:description, :author)
</code></pre>

<p>
  Again, we are saying here that we are only permitting <code>description</code>s and <code>author</code>s for each idea. Let's add put the above code in a method called <code>idea_params</code> like below:
</p>

<pre><code class = "ruby">
class IdeasController &lt; ApplicationController
  def index
    @ideas = Idea.all
  end

  def create
    @idea = Idea.create(idea_params)
  end

  private

  def idea_params
    params.require(:idea).permit(:description, :author)
  end
end
</code></pre>

<p>
  Awesome! Now that we've got the params set up, we need to tell rails what to do after we create the idea. What we need to do is redirect to a page (or else rails will give us an error). So after creating the idea, let's tell rails to redirect to the home page. We can do this by adding <code>redirect_to root_path</code>.
</p>

<pre><code class = "ruby">
class IdeasController &lt; ApplicationController
  def index
    @ideas = Idea.all
  end

  def create
    @idea = Idea.create(idea_params)
    redirect_to root_path
  end

  private

  def idea_params
    params.require(:idea).permit(:description, :author)
  end
end
</code></pre>

<p>
  So basically what we just did is this: we told rails that when we trigger the <code>create</code> method, we are going to create an idea using some information, or in other words <strong>parameters</strong> passed along to us, and then once that's done, we're going to redirect our browser to the root of the website, or in otherwords, the home page.
</p>

<p>
  Cool, let's get going. Now that we've got a create method, we can now go ahead and create a form for this.
</p>

<p>
  We're going to use a <code>gem</code> called <code>simple_form</code> that makes making forms super easy for us.
</p>

<p>
  First, go to the documentation <a href="https://github.com/plataformatec/simple_form" target="_blank">here</a>. Let's go ahead and follow the instructions.
</p>

<p>
  The first thing it tells us to do is to add the gem to your <code>Gemfile</code>. So in your <code>Gemfile</code>, add this line:
</p>

<pre><code class="ruby">
gem 'simple_form'
</code></pre>

<p>
  Then run the following command in the terminal to install it:
</p>

<pre><code class="bash">
bundle install
</code></pre>

<p>
  If we look at the documentation, we see that there are several options on how to run the simple form generator. In our case, we are going to run the generator that integrates simple form with bootstrap. So let's run this command.
</p>

<pre><code class="bash">
rails generate simple_form:install --bootstrap
</code></pre>

<p>
  Awesome. Remember, every time we run <code>bundle install</code>, we should restart the server. Let's go ahead and do that.
</p>

<p>
  Now that we've got simple form installed, let's go ahead and try to use it. At the top of <code>index.html.erb</code>, let's add this piece of code:
</p>

<pre><code class="ruby">
&lt;%= simple_form_for Idea.new do |f| %&gt;
  &lt;%= f.input :description %&gt;
  &lt;%= f.input :author %&gt;
  &lt;%= f.submit 'Submit' %&gt;
&lt;% end %&gt;
</code></pre>

<p>
  Let's go back into our browser and look at how it looks now. You should have a form just like that!
</p>

<p>
  However, the buttons look really ugly, so let's add some bootstrap buttons on there to make them look nicer. What we can do is add a <code>btn btn-primary</code> class to the Submit button. We can do this by adding <code>class: 'btn btn-primary'</code> to the Submit button code like below (make sure to put the <code>,</code> between <code>'Submit'</code> and <code>class:</code>)
</p>

<pre><code class="ruby">
&lt;%= simple_form_for Idea.new do |f| %&gt;
  &lt;%= f.input :description %&gt;
  &lt;%= f.input :author %&gt;
  &lt;%= f.submit 'Submit', class: 'btn btn-primary' %&gt;
&lt;% end %&gt;
</code></pre>

<p>
  Save the file and refresh the browser. We now see prettier buttons! Awesome!
</p>

<p>
   Now let's test this out. Enter an idea and an author and press 'Submit'. Voila! You should see your idea on your page, just like that!
</p>

<p>
  Let's go through the standard git workflow.
</p>

