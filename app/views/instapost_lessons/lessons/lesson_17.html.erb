<h1><%= title_for(InstapostLesson, 5, 9) %></h1>

<p>
  In the previous lesson, we created the backend logic for updating posts. The problem that we had is that although we hid the link to update the post on the front end, users could potentially type in their browser a URL like <code>http://localhost:3000/posts/1/edit</code> and access the edit page for a post that wasn't created by themselves.
</p>

<p>
  In order to prevent this, we're going to use something called <strong>filters</strong>. Take 10 minutes to read <%= link_to 'this article', 'http://guides.rubyonrails.org/action_controller_overview.html#filters' %> on filters, as it explains the topic really well.
</p>

<%= create_flashcard %>

<p>
  Let's go ahead and implement a <code>before_action</code> filter in our app. What we want to do is to check if the post is owned by the <code>current_user</code>, and if so, we want to redirect them to the <code>root_path</code> so they can't access the <code>edit</code> page.
</p>

<p>
  In <code>posts_controller.rb</code> below our <code>before_action :authenticate_user!</code>, let's add the following line of code:
</p>

<pre><code class="ruby">
before_action :is_owner?
</code></pre>

<p>
  Below our <code>update</code> method, let's add the following code:
</p>

<pre><code class="ruby">

private

def is_owner?
  if Post.find(params[:id]).user_id != current_user.id
    redirect_to root_path
  end
end
</code></pre>

<p>
  Let's first go over what we just did, and then let's go over what <code>private</code> means again.
</p>

<p>
  We first set a <code>before_action</code> filter in our <code>posts_controller.rb</code>. Using <code>before_action</code> will trigger the method we specified will be run (in this case the <code>is_owner?</code> method) before any of the actions (methods) are triggered.
</p>

<%= create_flashcard %>

<p>
  The <code>is_owner?</code> method just checks if the post's <code>user_id</code> and the <code>current_user.id</code> do not match, and if so, it redirects the user to the <code>root_path</code>.
</p>

<p>
  The <code>private</code> keyword is used to set private methods. In short, private methods are methods that can only be accessed by the same class. For a refresher on private methods, go back to <%= link_to 'this lesson', '/instapost_lessons/14' %>.
</p>

<p> 
  The filter we just added is pretty cool, but we don't want to apply this for the <code>index</code>, <code>new</code>, or <code>create</code> actions. Let's specify this:
</p>

<pre><code class="ruby">
before_action :is_owner?, only: [:edit, :update]
</code></pre>

<p>
  Now if we try to visit an edit page that we aren't supposed to be able to visit, then we will be redirected automatically to the root page.
</p>

<%= create_flashcard %>

<%= standard_git_workflow %>
