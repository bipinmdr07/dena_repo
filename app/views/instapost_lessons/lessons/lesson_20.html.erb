

<p>
  Next up: Adding comments to posts! Things are getting pretty exciting!
</p>

<p>
  What we want to do is add functionality so that users can post comments on photos.
</p>

<p>
  The first thing we need to do is create a controller and model for <code>Comment</code>. In our terminal, let's generate our controller:
</p>

<pre><code class="bash">
rails g controller comments
</code></pre>

<p>
  Then, let's generate our model:
</p>

<pre><code class="bash">
rails g model comment
</code></pre>

<p>
  <code>rails g</code> is just short for <code>rails generate</code> and I use it a lot since it saves a few milliseconds :)
</p>

<p>
  When we generate our model, our migration file is also generated. Let's set up our database columns first in the migration file like we did with posts.
</p>

<p>
  Search for the file that looks something like <code>xxxxxxxx_create_comments.rb</code>. In here, let's make the code look like this:
</p>

<pre><code class="ruby">
class CreateComments &lt; ActiveRecord::Migration
  def change
    create_table :comments do |t|
      t.integer :post_id
      t.integer :user_id
      t.text :text
      t.timestamps null: false
    end
  end
end
</code></pre>

<p>
  Let's go through why we need to store <code>post_id</code>, <code>user_id</code>, and <code>text</code> for each comment in our database.
</p>

<p>
  <strong>We need <code>post_id</code> because each comment will belong to a single photo.</strong>
</p> 

<p>
  For example, let's say you post a comment to someone's post. That comment will only be shown for that particular post, and not any other post. Therefore, we need to store the <code>post_id</code> in the database to store which <code>Post</code> the <code>Comment</code> belongs to.
</p>

<p>
  <strong>Similarly, we also need <code>user_id</code> because each comment belongs to one single user.</strong>
</p>

<p>
  <strong>Lastly, we need <code>text</code> because we need to store the contents of the comment.</strong>
</p>

<%= create_flashcard %>

<p>
  We're still missing something in the migration. Take a second to try and see if you can figure out what it is. 
</p>

<p class="alert alert-warning">
HINT: <code>post_id</code> and <code>user_id</code> are foreign keys!
</p>

<p>
  <strong>We need to add in indexes</strong>, like we did with the posts. It's going to look a little different than before:
</p>

<pre><code class="ruby">
add_index :comments, [:user_id, :post_id]
add_index :comments, :post_id
</code></pre>

<p>
  Let's look at the first line. What we're doing here is making an index of a <code>Comment</code> with a pair of and <code>user_id</code> and <code>post_id</code>. For example, one comment might have a <code>user_id</code> of <code>12</code> and a <code>post_id</code> of <code>322</code>. In this case, by making an index of a pair of <code>post_id</code> and <code>user_id</code>, if we do a query like this:
</p>

<pre><code class="ruby">
current_user.comments.where(post_id: 322)
</code></pre>

<p>
  the lookup will be faster. This is because in this case, we are querying the database for <code>Comment</code>s with the <code>user_id</code> of the <code>current_user</code>, where the <code>post_id</code> is <code>322</code>. In other words, we are looking <code>Comment</code>s with a particular set of <code>user_id</code> and <code>post_id</code>, so creating an index of <code>:comments, [:user_id, :post_id]</code> makes the lookup super fast.
</p>  

<p class="alert alert-warning">
  In case you might be wondering, <code>current_user.comments</code> automatically queries for <code>Comment</code>s with the <code>user_id</code> of <code>current_user</code>.
</p>

<%= create_flashcard %>

<p>
  We also need the second line (<code>add_index :comments, :post_id</code>) because we might want to do something like this:
</p>

<pre><code class="ruby">
@post = Post.find(params[:id])
@post.comments
</code></pre>

<p>
  In this case, Rails would look for <code>comments</code> with the <code>post_id</code> of <code>@post</code>. Notice here that we aren't querying for <code>user_id</code>, but rather only for <code>post_id</code>. 
</p>

<p class="alert alert-warning">
  Again, as a side note, <code>@post.comments</code> automatically queries for <code>Comment</code>s that belong to the <code>current_user</code>.
</p>

<p>
  Unfortunately, <code>add_index :comments, [:user_id, :post_id]</code> will work for looking up a pair of <code>user_id</code> and <code>post_id</code>, but it can't lookup just the <code>post_id</code> alone without the <code>user_id</code>. That's why we need to add in <code>add_index :comments, :post_id</code> as well.
</p>

<p>
  Cool, let's now go ahead and migrate our files.
</p>

<pre><code class="bash">
rake db:migrate
</code></pre>

<%= standard_git_workflow %>










